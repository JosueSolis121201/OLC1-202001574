/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>A_lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 47,  8, 48, 47, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    47,  0,  2,  0,  0,  0,  0, 13, 35, 36,  9, 30, 46, 31, 12,  7, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 42,  0,  6, 41,  5, 
     0, 22, 28, 27, 21, 17, 23, 40, 43, 34, 45,  3, 24, 16, 14, 19, 
    32, 44, 18, 26, 29, 15, 20,  3,  3, 39,  3, 37,  0, 38,  0, 10, 
     0, 22, 28, 27, 21, 17, 23, 40, 43, 34, 45,  3, 24, 16, 14, 19, 
    32, 44, 18, 26, 29, 15, 20,  3,  3, 39,  3,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 
     0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\3\1\11\3\1\1\3\3\1\12"+
    "\1\13\1\3\1\1\1\3\1\14\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\3\0\1\22\3\0\1\23\1\0"+
    "\5\3\1\0\2\3\1\0\3\3\1\0\1\24\5\3"+
    "\1\0\1\3\1\0\1\25\1\3\1\25\3\3\1\26"+
    "\2\3\2\0\3\3\1\27\1\30\1\0\1\31\1\3"+
    "\1\32\2\3\1\33\1\3\1\0\2\3\1\0\3\3"+
    "\1\0\1\3\1\0\1\34\2\3\2\35\1\0\1\3"+
    "\1\36\6\3\4\0\4\3\1\0\6\3\1\0\2\3"+
    "\2\0\3\3\1\37\1\3\1\0\1\3\1\0\1\3"+
    "\2\0\1\3\1\0\1\40\4\3\1\41\4\0\4\3"+
    "\1\0\3\3\1\42\1\3\1\43\1\0\2\3\2\0"+
    "\4\3\2\0\1\3\2\44\4\0\2\45\2\0\4\3"+
    "\4\0\4\3\2\46\1\47\1\50\1\0\1\51\2\0"+
    "\2\3\2\0\2\3\1\0\2\3\2\0\1\3\4\0"+
    "\1\52\3\0\1\3\1\53\2\3\1\0\1\54\2\0"+
    "\1\3\1\54\2\3\4\0\2\3\2\0\2\3\2\55"+
    "\1\3\1\0\2\56\7\0\1\3\1\57\1\0\1\3"+
    "\3\0\3\3\3\0\2\60\2\61\1\0\1\62\1\63"+
    "\1\64\1\3\5\0\1\65\2\0\1\66\2\67\1\0"+
    "\1\70\1\71\1\3\1\70\1\71\4\0\1\72\4\0"+
    "\1\73\1\74\3\0\1\3\1\75\4\0\1\76\5\0"+
    "\1\3\5\0\1\77\1\0\1\100\1\101\1\100\2\0"+
    "\1\102\1\0\1\103\1\0\1\104\1\105\3\0\1\106"+
    "\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\61\0\61\0\61"+
    "\0\365\0\61\0\61\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea"+
    "\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372"+
    "\0\u03a3\0\u03d4\0\u0405\0\61\0\u0436\0\u0467\0\u0498\0\u04c9"+
    "\0\61\0\61\0\61\0\61\0\61\0\u04fa\0\61\0\u0157"+
    "\0\u052b\0\223\0\61\0\u055c\0\u058d\0\u0126\0\u0126\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\304\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\61\0\u09f4"+
    "\0\304\0\u0a25\0\u0a56\0\u0a87\0\61\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u052b\0\61\0\u0c0f\0\61"+
    "\0\u0c40\0\304\0\u0c71\0\u0ca2\0\304\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd"+
    "\0\304\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014"+
    "\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac"+
    "\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\61\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\304"+
    "\0\u178b\0\u17bc\0\u17ed\0\u181e\0\304\0\u184f\0\u1880\0\u18b1"+
    "\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39"+
    "\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49"+
    "\0\61\0\304\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\61\0\304"+
    "\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d"+
    "\0\304\0\304\0\u214e\0\304\0\u217f\0\u21b0\0\u21e1\0\u2212"+
    "\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a"+
    "\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\61\0\u24f1"+
    "\0\u2522\0\u2553\0\u2584\0\304\0\u25b5\0\u25e6\0\u2617\0\61"+
    "\0\u2648\0\u2679\0\u26aa\0\304\0\u26db\0\u270c\0\u273d\0\u276e"+
    "\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6"+
    "\0\61\0\304\0\u2927\0\u2958\0\61\0\304\0\u2989\0\u29ba"+
    "\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\304\0\u2b11"+
    "\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99"+
    "\0\u2cca\0\u2cfb\0\61\0\304\0\61\0\304\0\u2d2c\0\61"+
    "\0\304\0\304\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52"+
    "\0\61\0\u2e83\0\u2eb4\0\304\0\61\0\304\0\u2ee5\0\61"+
    "\0\u2f16\0\u2f47\0\304\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c"+
    "\0\304\0\u306d\0\u309e\0\u30cf\0\u3100\0\61\0\61\0\u3131"+
    "\0\u3162\0\u3193\0\u31c4\0\61\0\u31f5\0\u3226\0\u3257\0\u3288"+
    "\0\61\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df"+
    "\0\u3410\0\u3441\0\u3472\0\u34a3\0\61\0\u34d4\0\61\0\61"+
    "\0\304\0\u3505\0\u3536\0\61\0\u3567\0\61\0\u3598\0\61"+
    "\0\61\0\u35c9\0\u35fa\0\u362b\0\61\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\2\1\16\1\17\1\5"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\5\1\30\1\31\1\32\1\33\1\5\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\2\5"+
    "\1\2\1\45\1\46\2\5\1\47\1\12\63\0\1\3"+
    "\11\0\1\50\1\51\44\0\2\52\1\53\56\52\3\0"+
    "\1\5\12\0\13\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\12\0\1\54\1\0"+
    "\1\55\50\0\1\56\1\0\1\56\6\0\1\57\3\0"+
    "\13\56\1\0\4\56\2\0\1\56\1\0\1\56\4\0"+
    "\2\56\2\0\3\56\4\0\1\50\11\0\1\50\1\51"+
    "\44\0\15\60\1\0\43\60\3\0\1\5\12\0\1\5"+
    "\1\61\3\5\1\62\5\5\1\0\4\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\12\0\3\5\1\63\1\5\1\64\2\5\1\65\2\5"+
    "\1\0\4\5\2\0\1\5\1\66\1\67\4\0\2\5"+
    "\2\0\3\5\6\0\1\5\12\0\1\70\12\5\1\71"+
    "\1\72\3\5\2\0\1\5\1\0\1\5\4\0\2\5"+
    "\2\0\2\5\1\73\6\0\1\5\12\0\3\5\1\74"+
    "\7\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\6\0\1\75\3\0"+
    "\4\5\1\76\6\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\3\5\1\77\7\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\3\5\1\100\7\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\1\101\12\5\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\6\0\1\5\12\0\1\5"+
    "\1\102\6\5\1\103\2\5\1\0\4\5\2\0\1\5"+
    "\1\104\1\105\4\0\2\5\2\0\3\5\24\0\1\106"+
    "\17\0\2\107\21\0\1\5\12\0\3\5\1\110\7\5"+
    "\1\0\4\5\2\0\1\5\1\107\1\111\4\0\2\5"+
    "\2\0\3\5\6\0\1\5\12\0\5\5\1\112\2\5"+
    "\1\113\2\5\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\6\0\1\5\12\0\5\5"+
    "\1\114\5\5\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\54\0\1\115\12\0\1\5"+
    "\12\0\5\5\1\116\2\5\1\117\2\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\21\0\1\120\1\0\1\121\43\0\1\5\12\0\1\122"+
    "\1\5\1\123\10\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\10\5\1\124\2\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\4\0\1\125\11\0"+
    "\1\125\45\0\10\54\1\126\50\54\7\55\1\0\1\55"+
    "\1\127\47\55\15\0\1\130\46\0\1\5\12\0\2\5"+
    "\1\131\10\5\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\6\0\1\5\12\0\13\5"+
    "\1\0\3\5\1\132\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\12\0\1\133\12\5"+
    "\1\0\3\5\1\134\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\12\0\7\5\1\135"+
    "\3\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\12\0\13\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\1\136\1\5"+
    "\2\0\3\5\24\0\1\137\42\0\1\5\12\0\3\5"+
    "\1\140\7\5\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\6\0\1\5\12\0\13\5"+
    "\1\0\3\5\1\141\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\15\0\1\142\51\0\1\5\6\0"+
    "\1\142\3\0\13\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\3\5\1\143\7\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\13\5\1\0\3\5\1\144\2\0\1\145\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\34\0\2\146\31\0\1\5"+
    "\12\0\4\5\1\147\6\5\1\0\4\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\6\0\1\150\3\0\13\5\1\0\4\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\12\0\7\5\1\151\3\5\1\0\4\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\12\0\1\152\12\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\12\5\1\153\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\21\0\1\154\45\0\1\5"+
    "\12\0\1\155\12\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\53\0\1\156\13\0"+
    "\1\5\12\0\13\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\1\5\1\157\2\0\3\5\6\0\1\5"+
    "\12\0\1\160\1\5\1\161\10\5\1\0\4\5\2\0"+
    "\1\5\1\0\1\5\4\0\2\5\2\0\3\5\6\0"+
    "\1\5\12\0\4\5\1\162\2\5\1\163\3\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\5\5\1\164\5\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\13\5\1\0\3\5\1\165"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\6\0\1\5\12\0\4\5\1\166\6\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\36\0\1\167\5\0\2\170\5\0\1\171\50\0\1\172"+
    "\23\0\1\5\12\0\13\5\1\0\1\5\1\173\2\5"+
    "\2\0\1\5\1\170\1\174\4\0\1\5\1\175\2\0"+
    "\3\5\6\0\1\5\12\0\13\5\1\0\4\5\2\0"+
    "\1\176\1\0\1\5\4\0\2\5\2\0\3\5\6\0"+
    "\1\5\12\0\13\5\1\177\1\200\1\201\2\5\2\0"+
    "\1\5\1\0\1\5\4\0\2\5\2\0\3\5\12\0"+
    "\1\126\54\0\1\5\12\0\3\5\1\202\7\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\5\5\1\203\5\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\5\5\1\204\5\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\5\5\1\205\5\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\21\0\1\206\45\0\1\5\12\0\1\207\12\5"+
    "\1\0\4\5\2\0\1\5\1\0\1\5\4\0\2\5"+
    "\2\0\3\5\6\0\1\5\12\0\5\5\1\210\5\5"+
    "\1\0\4\5\2\0\1\5\1\0\1\5\4\0\2\5"+
    "\2\0\3\5\30\0\1\211\13\0\2\212\21\0\1\5"+
    "\12\0\13\5\1\0\1\5\1\213\2\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\12\0\5\5\1\214\5\5\1\0\4\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\12\0\3\5\1\215\7\5\1\0\4\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\44\0\2\216"+
    "\21\0\1\5\12\0\7\5\1\217\3\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\33\0\1\220\33\0\1\5\12\0\13\5\1\0\1\5"+
    "\1\221\2\5\2\0\1\5\1\0\1\5\4\0\2\5"+
    "\2\0\3\5\6\0\1\5\12\0\13\5\1\222\1\223"+
    "\3\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\15\0\1\224\51\0\1\5\6\0\1\224\3\0"+
    "\13\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\22\0\1\225\44\0\1\5\12\0"+
    "\1\5\1\226\11\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\6\0"+
    "\1\227\3\0\13\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\5\5\1\230\5\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\10\5\1\231\2\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\3\5\1\232\7\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\12\5\1\233\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\6\0\1\5\12\0\3\5"+
    "\1\234\7\5\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\6\0\1\5\12\0\10\5"+
    "\1\235\2\5\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\25\0\1\236\71\0\1\237"+
    "\47\0\1\240\60\0\1\241\41\0\1\5\12\0\4\5"+
    "\1\242\6\5\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\6\0\1\5\12\0\13\5"+
    "\1\0\1\5\1\243\2\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\6\0\1\5\12\0\4\5"+
    "\1\244\6\5\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\6\0\1\5\12\0\4\5"+
    "\1\245\6\5\1\0\4\5\2\0\1\5\1\0\1\5"+
    "\4\0\2\5\2\0\3\5\40\0\1\246\26\0\1\5"+
    "\12\0\13\5\1\0\3\5\1\247\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\3\5\1\250\7\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\4\5\1\251\6\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\4\5\1\252\6\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\7\5\1\253\3\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\4\5\1\254\6\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\40\0\1\255\26\0"+
    "\1\5\12\0\13\5\1\0\3\5\1\256\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\12\0\1\257\12\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\44\0\2\260\66\0"+
    "\1\261\13\0\1\5\12\0\1\5\1\262\11\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\4\5\1\263\6\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\13\5\1\0\3\5\1\264"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\6\0\1\5\12\0\10\5\1\265\2\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\26\0\1\266\40\0\1\5\12\0\13\5\1\0\4\5"+
    "\2\0\1\5\1\267\1\270\4\0\2\5\2\0\3\5"+
    "\26\0\1\271\40\0\1\5\12\0\5\5\1\272\5\5"+
    "\1\0\4\5\2\0\1\5\1\0\1\5\4\0\2\5"+
    "\2\0\3\5\23\0\1\273\6\0\1\274\1\0\2\275"+
    "\5\0\1\276\36\0\1\277\45\0\1\5\12\0\1\300"+
    "\12\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\27\0\1\301\13\0\1\302\23\0"+
    "\1\5\12\0\13\5\1\0\1\5\1\303\2\5\2\0"+
    "\1\5\1\0\1\5\4\0\2\5\2\0\3\5\6\0"+
    "\1\5\12\0\1\304\12\5\1\0\4\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\12\0\3\5\1\305\7\5\1\0\4\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\12\0\1\306\12\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\24\0\1\307\100\0"+
    "\2\310\37\0\1\311\100\0\2\312\21\0\1\5\12\0"+
    "\3\5\1\313\7\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\13\5\1\0\4\5\2\0\1\5\1\310\1\314\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\12\0\3\5\1\315"+
    "\7\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\12\0\13\5\1\0"+
    "\4\5\2\0\1\5\1\312\1\316\4\0\2\5\2\0"+
    "\3\5\31\0\1\317\35\0\1\5\12\0\10\5\1\320"+
    "\2\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\12\0\4\5\1\321"+
    "\6\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\12\0\5\5\1\322"+
    "\5\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\6\0\1\323\3\0"+
    "\13\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\12\0\5\5\1\324"+
    "\5\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\6\0\1\325\3\0"+
    "\13\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\25\0\1\326\41\0\1\5\12\0"+
    "\4\5\1\327\6\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\13\5\1\0\1\5\1\330\2\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\32\0\1\331\50\0"+
    "\1\332\44\0\1\5\12\0\13\5\1\0\3\5\1\333"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\6\0\1\5\12\0\1\334\12\5\1\0\4\5\2\0"+
    "\1\5\1\0\1\5\4\0\2\5\2\0\3\5\6\0"+
    "\1\5\12\0\13\5\1\0\4\5\2\0\1\5\1\335"+
    "\1\336\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\7\5\1\337\3\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\15\0\1\340\71\0"+
    "\1\341\40\0\1\5\12\0\5\5\1\342\5\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\24\0\1\343\17\0\2\344\35\0\1\345\62\0"+
    "\1\346\17\0\2\347\44\0\1\350\60\0\1\351\60\0"+
    "\1\352\35\0\1\5\12\0\13\5\1\0\3\5\1\353"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\6\0\1\5\12\0\10\5\1\354\2\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\6\0\1\5\12\0\10\5\1\355\2\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\6\0\1\5\12\0\13\5\1\0\1\5\1\356\2\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\23\0\1\357\63\0\1\360\66\0\2\361\46\0\1\362"+
    "\43\0\1\5\12\0\2\5\1\363\10\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\6\0\1\5\12\0\5\5\1\364\5\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\6\0\1\5\12\0\13\5\1\361\1\365\3\5\2\0"+
    "\1\5\1\0\1\5\4\0\2\5\2\0\3\5\6\0"+
    "\1\5\12\0\2\5\1\366\10\5\1\0\4\5\2\0"+
    "\1\5\1\0\1\5\4\0\2\5\2\0\3\5\15\0"+
    "\1\367\51\0\1\5\6\0\1\367\3\0\13\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\26\0\1\370\60\0\1\371\63\0\1\372\35\0"+
    "\1\5\12\0\10\5\1\373\2\5\1\0\4\5\2\0"+
    "\1\5\1\0\1\5\4\0\2\5\2\0\3\5\6\0"+
    "\1\5\12\0\3\5\1\374\7\5\1\0\4\5\2\0"+
    "\1\5\1\0\1\5\4\0\2\5\2\0\3\5\24\0"+
    "\1\375\65\0\1\376\35\0\1\5\12\0\10\5\1\377"+
    "\2\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\6\0\1\5\12\0\10\5\1\u0100"+
    "\2\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\25\0\1\u0101\41\0\1\5\12\0"+
    "\4\5\1\u0102\6\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\3\5\1\u0103\7\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\36\0\1\u0104\43\0"+
    "\1\u0105\45\0\1\5\12\0\1\u0106\12\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\40\0\1\u0107\44\0\1\u0108\55\0\1\u0109\112\0\1\u010a"+
    "\32\0\1\u010b\66\0\1\u010c\52\0\1\u010d\41\0\1\5"+
    "\12\0\3\5\1\u010e\7\5\1\0\4\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\12\0\1\u010f\12\5\1\0\4\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\6\0\1\5\12\0"+
    "\13\5\1\0\4\5\2\0\1\5\1\u0110\1\u0111\4\0"+
    "\2\5\2\0\3\5\24\0\1\u0112\65\0\1\u0113\73\0"+
    "\2\u0114\21\0\1\5\12\0\3\5\1\u0115\7\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\10\5\1\u0116\2\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\13\5\1\0\4\5\2\0"+
    "\1\5\1\u0114\1\u0117\4\0\2\5\2\0\3\5\57\0"+
    "\1\u0118\16\0\1\u0119\60\0\1\u011a\77\0\2\u011b\31\0"+
    "\1\5\12\0\13\5\1\u011b\1\u011c\3\5\2\0\1\5"+
    "\1\0\1\5\4\0\2\5\2\0\3\5\6\0\1\5"+
    "\12\0\13\5\1\u011d\1\u011e\3\5\2\0\1\5\1\0"+
    "\1\5\4\0\2\5\2\0\3\5\25\0\1\u011f\66\0"+
    "\1\u0120\33\0\1\5\12\0\4\5\1\u0121\6\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\4\5\1\u0122\6\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\12\0\4\5\1\u0123\6\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\26\0\1\u0124\60\0\1\u0125\53\0\1\u0126\75\0"+
    "\1\u0127\44\0\1\u0128\67\0\1\u0129\55\0\1\u012a\63\0"+
    "\1\u012b\35\0\1\5\12\0\4\5\1\u012c\6\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\31\0\1\u012d\35\0\1\5\12\0\10\5\1\u012e"+
    "\2\5\1\0\4\5\2\0\1\5\1\0\1\5\4\0"+
    "\2\5\2\0\3\5\21\0\1\u012f\64\0\1\u0130\60\0"+
    "\1\u0131\41\0\1\5\12\0\1\u0132\12\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\6\0\1\5\12\0\4\5\1\u0133\6\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\6\0\1\5\12\0\4\5\1\u0134\6\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\22\0\1\u0135\102\0\2\u0136\57\0\2\u0137\37\0\1\u0138"+
    "\42\0\1\5\12\0\5\5\1\u0139\5\5\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\21\0\1\u013a\67\0\1\u013b\70\0\1\u013c\64\0\2\u013d"+
    "\34\0\1\u013e\64\0\1\u013f\56\0\1\u0140\75\0\1\u0141"+
    "\35\0\1\u0142\51\0\1\5\12\0\13\5\1\0\3\5"+
    "\1\u0143\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\6\0\1\5\6\0\1\u0142\3\0\13\5\1\0"+
    "\4\5\2\0\1\5\1\0\1\5\4\0\2\5\2\0"+
    "\3\5\24\0\1\u0144\107\0\1\u0145\60\0\1\u0146\26\0"+
    "\1\u0147\77\0\1\u0148\46\0\1\u0149\57\0\1\u014a\61\0"+
    "\1\u014b\56\0\1\u014c\65\0\1\u014d\50\0\1\u014e\45\0"+
    "\1\5\12\0\10\5\1\u014f\2\5\1\0\4\5\2\0"+
    "\1\5\1\0\1\5\4\0\2\5\2\0\3\5\22\0"+
    "\1\u0150\60\0\1\u0151\76\0\1\u0152\45\0\1\u0153\64\0"+
    "\1\u0154\50\0\1\u0155\77\0\1\u0156\53\0\1\u0157\60\0"+
    "\1\u0158\33\0\1\5\12\0\12\5\1\u0159\1\0\4\5"+
    "\2\0\1\5\1\0\1\5\4\0\2\5\2\0\3\5"+
    "\31\0\1\u015a\60\0\1\u015b\53\0\1\u015c\65\0\1\u015d"+
    "\63\0\2\u015e\50\0\1\u015f\66\0\1\u0160\60\0\1\u0161"+
    "\52\0\1\u0162\61\0\1\u0163\76\0\2\u0164\47\0\2\u0165"+
    "\51\0\1\u0166\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13916];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\3\11\1\1\2\11\20\1\1\11"+
    "\4\1\5\11\1\1\1\11\3\0\1\11\3\0\1\1"+
    "\1\0\5\1\1\0\2\1\1\0\3\1\1\0\6\1"+
    "\1\0\1\1\1\0\1\11\5\1\1\11\2\1\2\0"+
    "\4\1\1\11\1\0\1\11\6\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\5\1\1\0\10\1\4\0"+
    "\4\1\1\0\6\1\1\0\2\1\2\0\3\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\6\1\4\0\4\1\1\0\6\1\1\0\2\1\2\0"+
    "\4\1\2\0\1\1\1\11\1\1\4\0\1\11\1\1"+
    "\2\0\4\1\4\0\10\1\1\0\1\1\2\0\2\1"+
    "\2\0\2\1\1\0\2\1\2\0\1\1\4\0\1\11"+
    "\3\0\4\1\1\0\1\11\2\0\4\1\4\0\2\1"+
    "\2\0\2\1\1\11\2\1\1\0\1\11\1\1\7\0"+
    "\2\1\1\0\1\1\3\0\3\1\3\0\1\11\1\1"+
    "\1\11\1\1\1\0\1\11\3\1\5\0\1\11\2\0"+
    "\1\1\1\11\1\1\1\0\1\11\4\1\4\0\1\1"+
    "\4\0\2\11\3\0\1\1\1\11\4\0\1\11\5\0"+
    "\1\1\5\0\1\11\1\0\2\11\1\1\2\0\1\11"+
    "\1\0\1\11\1\0\2\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+
"Linea"+(yyline+1)+" Columna "+yycolumn);
            } 
            // fall through
          case 72: break;
          case 2: 
            { return new Symbol(Simbolos.num, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 3: 
            { return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 4: 
            { return new Symbol(Simbolos.interrogacion_A, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 5: 
            { return new Symbol(Simbolos.interrogacion_B, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 6: 
            { return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 7: 
            { return new Symbol(Simbolos.divicion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 8: 
            { /*este es un comentario en java, omitirlos*/
            } 
            // fall through
          case 79: break;
          case 9: 
            { return new Symbol(Simbolos.multiplicacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 10: 
            { return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 11: 
            { return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 12: 
            { return new Symbol(Simbolos.parentesis_A, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 13: 
            { return new Symbol(Simbolos.parentesis_B, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 14: 
            { return new Symbol(Simbolos.corchete_A, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 15: 
            { return new Symbol(Simbolos.corchete_B, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 16: 
            { return new Symbol(Simbolos.punto_coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 17: 
            { return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 18: 
            { return new Symbol(Simbolos.String, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 19: 
            { return new Symbol(Simbolos.nombre_variable, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 20: 
            { return new Symbol(Simbolos.or, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 21: 
            { return new Symbol(Simbolos.si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 22: 
            { return new Symbol(Simbolos.asignacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 23: 
            { return new Symbol(Simbolos.Double, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 24: 
            { /* ignore */
            } 
            // fall through
          case 95: break;
          case 25: 
            { return new Symbol(Simbolos.Char, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 26: 
            { return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 27: 
            { return new Symbol(Simbolos.mod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 28: 
            { return new Symbol(Simbolos.and, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 29: 
            { return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 30: 
            { return new Symbol(Simbolos.con, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 31: 
            { return new Symbol(Simbolos.o_si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 32: 
            { return new Symbol(Simbolos.prComo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 33: 
            { return new Symbol(Simbolos.para, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 34: 
            { return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 35: 
            { return new Symbol(Simbolos.mayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 36: 
            { return new Symbol(Simbolos.Falso, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 37: 
            { return new Symbol(Simbolos.segun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 38: 
            { return new Symbol(Simbolos.hasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 39: 
            { return new Symbol(Simbolos.hacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 40: 
            { return new Symbol(Simbolos.prNumero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 41: 
            { return new Symbol(Simbolos.metodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 42: 
            { return new Symbol(Simbolos.fin_si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 43: 
            { return new Symbol(Simbolos.prCadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 44: 
            { return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 45: 
            { return new Symbol(Simbolos.repetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 46: 
            { return new Symbol(Simbolos.funcion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 47: 
            { return new Symbol(Simbolos.prBoolean, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 48: 
            { return new Symbol(Simbolos.mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 49: 
            { return new Symbol(Simbolos.entonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 50: 
            { return new Symbol(Simbolos.es_igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 51: 
            { return new Symbol(Simbolos.ejecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 52: 
            { return new Symbol(Simbolos.retornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 53: 
            { return new Symbol(Simbolos.fin_para, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 54: 
            { return new Symbol(Simbolos.prCaracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 55: 
            { return new Symbol(Simbolos.potencia, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 56: 
            { return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 57: 
            { return new Symbol(Simbolos.imprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 58: 
            { return new Symbol(Simbolos.Verdadero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 59: 
            { return new Symbol(Simbolos.fin_segun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 60: 
            { return new Symbol(Simbolos.prCon_valor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 61: 
            { return new Symbol(Simbolos.hasta_que, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 62: 
            { return new Symbol(Simbolos.fin_metodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 63: 
            { return new Symbol(Simbolos.fin_funcion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 64: 
            { return new Symbol(Simbolos.incremental, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 65: 
            { return new Symbol(Simbolos.imprimir_nl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 66: 
            { return new Symbol(Simbolos.es_diferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 67: 
            { return new Symbol(Simbolos.fin_mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 68: 
            { return new Symbol(Simbolos.menor_o_igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 69: 
            { return new Symbol(Simbolos.mayor_o_igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 70: 
            { return new Symbol(Simbolos.con_parametros, yycolumn, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 71: 
            { return new Symbol(Simbolos.de_lo_contrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
