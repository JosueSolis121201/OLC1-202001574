package analizadores;
import java_cup.runtime.Symbol;
import Instrucciones.*;



//definicion de terminalesterminal 
terminal String id;
terminal String coma;
terminal String prInicio;
terminal String prFin;

terminal String prNumero;
terminal String prCadena;
terminal String prBoolean;
terminal String prCaracter;


terminal String menos;
terminal String multiplicacion;
terminal String divicion;
terminal String potencia;
terminal String mod;
terminal String parentesis_A;
terminal String parentesis_B;

terminal String mayor;
terminal String menor;
terminal String mayor_o_igual;
terminal String menor_o_igual;
terminal String es_igual;
terminal String es_diferente;

terminal String or;
terminal String and;
terminal String not;

terminal String prIngresar;
terminal String prComo;
terminal String prCon_valor;

terminal String nombre_variable;

terminal String asignacion;
terminal String punto_coma;

terminal String si;
terminal String fin_si;
terminal String de_lo_contrario;
terminal String o_si;

terminal String segun;
terminal String hacer;
terminal String entonces;
terminal String fin_segun;
terminal String interrogacion_A;
terminal String interrogacion_B;

terminal String para;
terminal String hasta;
terminal String fin_para;

terminal String mientras;
terminal String fin_mientras;

terminal String repetir;
terminal String hasta_que;

terminal String funcion;
terminal String fin_funcion;
terminal String con_parametros;
terminal String igual;


terminal String retornar;

terminal String metodo;
terminal String fin_metodo;

terminal String ejecutar;
terminal String imprimir;
terminal String imprimir_nl;

terminal String mas;
terminal String num;
terminal String String;
terminal String Double;

terminal String Verdadero;
terminal String Falso;
terminal String Char;

terminal String corchete_A;
terminal String corchete_B;

terminal String con;
terminal String incremental;

//definicion de no terminales
non terminal Instruccion S0;
non terminal Instruccion INITIAL;
non terminal Instruccion VALORES;
non terminal Instruccion ESTRUCTURA;
non terminal Instruccion OPERACION;
non terminal Instruccion DECLARACION;
non terminal Instruccion TIPO_DE_DATO;
non terminal Instruccion EXPRESION;

non terminal NOMBRE_VARIABLES;
non terminal OPERADORES;
non terminal NUMERICO;
non terminal UNARIO;
non terminal ASIGNACION;
non terminal IF;
non terminal IMPRESION;
non terminal ELSE;
non terminal ELSE_IF;

non terminal SWITCH;
non terminal SWITCH_CASE;
non terminal SWITCH_ELSE;

non terminal CICLO_PARA;
non terminal CICLO_PARA_DEFINIDO;
non terminal SUB_CICLO_PARA_DEFINIDO;

non terminal CICLO_MIENTRAS;
non terminal CICLO_MIENTRAS_DEFINIDO;

non terminal CICLO_REPETIR;
non terminal CICLO_REPETIR_DEFINIDO;


non terminal RETORNO;




//gramaticas
start with S0
;

S0::= INITIAL:a{: :}
;

INITIAL::=  INITIAL ESTRUCTURA
    | ESTRUCTURA
;

ESTRUCTURA::= DECLARACION punto_coma
    | ASIGNACION punto_coma
    | IF
    | IMPRESION punto_coma
    | SWITCH
    | CICLO_PARA
    | CICLO_MIENTRAS
    | CICLO_REPETIR
    | RETORNO punto_coma
   
;
    
RETORNO::= retornar EXPRESION      

;

IMPRESION::= imprimir EXPRESION      
    | imprimir_nl EXPRESION 
;

IF::= si EXPRESION entonces ESTRUCTURA ELSE_IF ELSE fin_si     
;

ELSE_IF::= ELSE_IF o_si EXPRESION entonces ESTRUCTURA  
    | 
;

ELSE::= de_lo_contrario ESTRUCTURA
    | 
;

SWITCH::= segun EXPRESION hacer SWITCH_CASE SWITCH_ELSE fin_segun      
;

SWITCH_CASE::= SWITCH_CASE interrogacion_A EXPRESION interrogacion_B entonces ESTRUCTURA 
    |
;

SWITCH_ELSE::= de_lo_contrario entonces ESTRUCTURA
    |
;

CICLO_PARA::= para EXPRESION asignacion EXPRESION hasta EXPRESION  CICLO_PARA_DEFINIDO fin_para     
;

CICLO_PARA_DEFINIDO::=hacer SUB_CICLO_PARA_DEFINIDO
    | con incremental EXPRESION hacer SUB_CICLO_PARA_DEFINIDO
;

SUB_CICLO_PARA_DEFINIDO::=SUB_CICLO_PARA_DEFINIDO  ESTRUCTURA
    | 
;

CICLO_MIENTRAS::= mientras EXPRESION hacer CICLO_MIENTRAS_DEFINIDO fin_mientras     
;

CICLO_MIENTRAS_DEFINIDO::= CICLO_MIENTRAS_DEFINIDO  ESTRUCTURA
    | 
;

CICLO_REPETIR::= repetir CICLO_REPETIR_DEFINIDO hasta_que EXPRESION     
;

CICLO_REPETIR_DEFINIDO::= CICLO_REPETIR_DEFINIDO  ESTRUCTURA
    | 
;



ASIGNACION::= NOMBRE_VARIABLES asignacion:a EXPRESION   {: System.out.println(a);  :}   
;

DECLARACION::= prIngresar:a NOMBRE_VARIABLES:b prComo:c TIPO_DE_DATO:d prCon_valor:e EXPRESION:f  {: System.out.println(a+b+c+d+e+f);  :}   
;

TIPO_DE_DATO::= prNumero {:System.out.println("numero");:}
    | prCadena {:System.out.println("cadena");:}
    | prBoolean {:System.out.println("prBoolean");:}
    | prCaracter  {:System.out.println("prCaracter");:}
;

EXPRESION::= OPERACION 
    | String:a {:System.out.println(a);:}
    | Verdadero {:System.out.println("Verdadero");:}
    | Falso  {:System.out.println("Falso");:}
    | Char:a  {:System.out.println(a);:}
    | UNARIO

;
    
UNARIO::=  mas NUMERICO {:System.out.println("UN_MAS");:}    
    | menos NUMERICO   {:System.out.println("UN_MENOS");:}  
;

NUMERICO::=  num   
    | Double     
;



NOMBRE_VARIABLES::= NOMBRE_VARIABLES coma nombre_variable   
    | nombre_variable :a {:System.out.println(a);:}
    |  
;





OPERACION::=  OPERACION OPERADORES VALORES  
    | VALORES
;

OPERADORES ::= mas
    | menos
    | divicion
    | potencia
    | mod
    | multiplicacion
    | mayor
    | menor
    | mayor_o_igual
    | menor_o_igual
    | es_igual
    | es_diferente
;



VALORES::= num:a{:System.out.println(a);:}
    | parentesis_A OPERACION parentesis_B
    | corchete_A OPERACION corchete_B
    | nombre_variable
    | Double
;






