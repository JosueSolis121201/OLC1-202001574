package analizadores;
import java_cup.runtime.Symbol;
import Instrucciones.*;

//PARSER 
parser code
{://Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

:}

//definicion de terminalesterminal 
terminal String id;
terminal String coma;
terminal String prInicio;
terminal String prFin;

terminal String prNumero;
terminal String prCadena;
terminal String prBoolean;
terminal String prCaracter;


terminal String menos;
terminal String multiplicacion;
terminal String divicion;
terminal String potencia;
terminal String mod;
terminal String parentesis_A;
terminal String parentesis_B;

terminal String mayor;
terminal String menor;
terminal String mayor_o_igual;
terminal String menor_o_igual;
terminal String es_igual;
terminal String es_diferente;

terminal String or;
terminal String and;
terminal String not;

terminal String prIngresar;
terminal String prComo;
terminal String prCon_valor;

terminal String nombre_variable;

terminal String asignacion;
terminal String punto_coma;

terminal String si;
terminal String fin_si;
terminal String de_lo_contrario;
terminal String o_si;

terminal String segun;
terminal String hacer;
terminal String entonces;
terminal String fin_segun;
terminal String interrogacion_A;
terminal String interrogacion_B;

terminal String para;
terminal String hasta;
terminal String fin_para;

terminal String mientras;
terminal String fin_mientras;

terminal String repetir;
terminal String hasta_que;

terminal String funcion;
terminal String fin_funcion;
terminal String con_parametros;
terminal String igual;


terminal String retornar;

terminal String metodo;
terminal String fin_metodo;

terminal String ejecutar;
terminal String imprimir;
terminal String imprimir_nl;

terminal String mas;
terminal String num;
terminal String String;
terminal String Double;

terminal String Verdadero;
terminal String Falso;
terminal String Char;

terminal String corchete_A;
terminal String corchete_B;

terminal String con;
terminal String incremental;

//definicion de no terminales
non terminal String OPERADORES;

non terminal Instruccion S0;
non terminal Instruccion INSTRUCCIONES;
non terminal Instruccion VALORES;
non terminal Instruccion ESTRUCTURA;
non terminal Instruccion OPERACION;
non terminal Instruccion DECLARACION;
non terminal Instruccion TIPO_DE_DATO;
non terminal Instruccion EXPRESION;

non terminal Instruccion NOMBRE_VARIABLES;

non terminal Instruccion NUMERICO;
non terminal Instruccion UNARIO;
non terminal Instruccion ASIGNACION;
non terminal Instruccion IF;
non terminal Instruccion IMPRESION;
non terminal Instruccion ELSE;
non terminal Instruccion ELSE_IF;

non terminal Instruccion SWITCH;
non terminal Instruccion SWITCH_CASE;
non terminal Instruccion SWITCH_ELSE;

non terminal Instruccion CICLO_PARA;
non terminal Instruccion CICLO_PARA_DEFINIDO;
non terminal Instruccion SUB_CICLO_PARA_DEFINIDO;

non terminal Instruccion CICLO_MIENTRAS;
non terminal Instruccion CICLO_MIENTRAS_DEFINIDO;

non terminal Instruccion CICLO_REPETIR;
non terminal Instruccion CICLO_REPETIR_DEFINIDO;

non terminal Instruccion LISTA;


non terminal Instruccion RETORNO;

non terminal Instruccion METODOS;
non terminal Instruccion SUB_METODOS;
non terminal Instruccion SUB2_METODOS;
non terminal Instruccion SUB3_METODOS;


non terminal Instruccion FUNCION;
non terminal Instruccion SUB_FUNCION;
non terminal Instruccion SUB2_FUNCION;
non terminal Instruccion SUB3_FUNCION;

non terminal Instruccion LLAMADA;
non terminal Instruccion SUB_LLAMADA;
non terminal Instruccion SUB2_LLAMADA;
non terminal Instruccion SUB3_LLAMADA;

non terminal Instruccion S1;




//gramaticas
start with S0
;

S0::= prInicio S1 prFin
;

S1::= INSTRUCCIONES
    | METODOS
    | FUNCION
    | LLAMADA

;

INSTRUCCIONES::=  INSTRUCCIONES:a ESTRUCTURA:b {: ((Estructura)a).agregarNombre(b); RESULT=a;:} 
    | ESTRUCTURA:a {:RESULT=new Estructura(a);:} 
;

ESTRUCTURA::= DECLARACION:a punto_coma {:System.out.println(a.imprimir());:} 
    | ASIGNACION punto_coma
    | IF
    | IMPRESION punto_coma
    | SWITCH
    | CICLO_PARA
    | CICLO_MIENTRAS
    | CICLO_REPETIR
    | RETORNO punto_coma
;
    
RETORNO::= retornar EXPRESION      

;

IMPRESION::= imprimir EXPRESION      
    | imprimir_nl EXPRESION 
;

IF::= si EXPRESION entonces INSTRUCCIONES ELSE_IF ELSE fin_si     
;

ELSE_IF::= ELSE_IF o_si EXPRESION entonces INSTRUCCIONES  
    | 
;

ELSE::= de_lo_contrario INSTRUCCIONES
    | 
;

SWITCH::= segun EXPRESION hacer SWITCH_CASE SWITCH_ELSE fin_segun      
;

SWITCH_CASE::= SWITCH_CASE interrogacion_A EXPRESION interrogacion_B entonces INSTRUCCIONES 
    |
;

SWITCH_ELSE::= de_lo_contrario entonces INSTRUCCIONES
    |
;

CICLO_PARA::= para EXPRESION asignacion EXPRESION hasta EXPRESION  CICLO_PARA_DEFINIDO fin_para     
;

CICLO_PARA_DEFINIDO::=hacer SUB_CICLO_PARA_DEFINIDO
    | con incremental EXPRESION hacer SUB_CICLO_PARA_DEFINIDO
;

SUB_CICLO_PARA_DEFINIDO::=SUB_CICLO_PARA_DEFINIDO  ESTRUCTURA
    | 
;

CICLO_MIENTRAS::= mientras EXPRESION hacer CICLO_MIENTRAS_DEFINIDO fin_mientras     
;

CICLO_MIENTRAS_DEFINIDO::= CICLO_MIENTRAS_DEFINIDO  ESTRUCTURA
    | 
;

CICLO_REPETIR::= repetir CICLO_REPETIR_DEFINIDO hasta_que EXPRESION     
;

CICLO_REPETIR_DEFINIDO::= CICLO_REPETIR_DEFINIDO  ESTRUCTURA
    | 
;

METODOS::= metodo nombre_variable SUB3_METODOS  INSTRUCCIONES fin_metodo      
;

SUB3_METODOS::= con_parametros parentesis_A SUB2_METODOS  parentesis_B
    |
;

SUB2_METODOS::= SUB_METODOS
    |
;

SUB_METODOS::= SUB_METODOS coma nombre_variable TIPO_DE_DATO
    | nombre_variable TIPO_DE_DATO
;







FUNCION::= funcion nombre_variable TIPO_DE_DATO SUB3_FUNCION  INSTRUCCIONES fin_funcion      
;

SUB3_FUNCION::= con_parametros parentesis_A SUB2_FUNCION  parentesis_B
    |
;

SUB2_FUNCION::= SUB_FUNCION
    |
;

SUB_FUNCION::= SUB_FUNCION coma nombre_variable TIPO_DE_DATO
    | nombre_variable TIPO_DE_DATO
;







LLAMADA::= ejecutar nombre_variable  SUB3_LLAMADA  punto_coma     
;

SUB3_LLAMADA::=  parentesis_A SUB2_LLAMADA  parentesis_B
    |
;

SUB2_LLAMADA::= SUB_LLAMADA
    |
;

SUB_LLAMADA::= SUB_LLAMADA coma nombre_variable TIPO_DE_DATO
    | nombre_variable TIPO_DE_DATO
;



ASIGNACION::= NOMBRE_VARIABLES asignacion:a EXPRESION    
;

DECLARACION::= prIngresar:p NOMBRE_VARIABLES:a prComo:o TIPO_DE_DATO:b prCon_valor:i  EXPRESION:c    {:RESULT=new Declaracion(a,b,c);:} 
;

TIPO_DE_DATO::= prNumero:a {:RESULT=new Valor(a);:}  
    | prCadena:a {:RESULT=new Valor(a);:}  
    | prBoolean:a {:RESULT=new Valor(a);:}  
    | prCaracter:a {:RESULT=new Valor(a);:}   
;

EXPRESION::= OPERACION:a {:RESULT= a;:}  
    | String:a {:RESULT=new Valor(a);:} 
    | Verdadero:a {:RESULT=new Valor(a);:} 
    | Falso:a {:RESULT=new Valor(a);:}  
    | Char:a {:RESULT=new Valor(a);:}  
    | UNARIO:a {:RESULT=a;:}
    | not:a {:RESULT=new Valor(a);:}


;
    
UNARIO::=  mas:a NUMERICO:b {:RESULT=new Unario(a,b);:}     
    | menos:a NUMERICO:b {:RESULT=new Unario(a,b);:}    
;

NUMERICO::=  num:a {:RESULT=new Valor(a);:}  
    | Double:a {:RESULT=new Valor(a);:}    
;



NOMBRE_VARIABLES::= NOMBRE_VARIABLES:a coma nombre_variable:b {: ((Lista_Nombres)a).agregarNombre(b); RESULT=a;:}   
    | nombre_variable:a {:RESULT=new Lista_Nombres(a);:} 
;





OPERACION::=  OPERACION:a OPERADORES:b VALORES:c {:RESULT=new OperacionBinaria(a,c,b);:}
    | VALORES:a {:RESULT=a;:}
;

OPERADORES ::= mas:a {:RESULT=a;:}
    | menos:a {:RESULT=a;:}
    | divicion:a {:RESULT=a;:}
    | potencia:a {:RESULT=a;:}
    | mod:a {:RESULT=a;:}
    | multiplicacion:a {:RESULT=a;:}
    | mayor:a {:RESULT=a;:}
    | menor:a {:RESULT=a;:}
    | mayor_o_igual:a {:RESULT=a;:}
    | menor_o_igual:a {:RESULT=a;:}
    | es_igual:a {:RESULT=a;:}
    | es_diferente:a {:RESULT=a;:}
    | or:a {:RESULT=a;:}
    | and:a {:RESULT=a;:}
    | not:a {:RESULT=a;:}
    
;



VALORES::= num:a {:RESULT=new Valor(a);:}
    | parentesis_A OPERACION:a parentesis_B {:RESULT=a;:}
    | corchete_A OPERACION corchete_B
    | nombre_variable:a {:RESULT=new Valor(a);:}
    | Double:a {:RESULT=new Valor(a);:}
    
;






