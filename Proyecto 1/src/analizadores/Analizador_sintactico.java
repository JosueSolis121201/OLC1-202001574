
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import Instrucciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\036\004\000\002\020" +
    "\004\000\002\020\004\000\002\017\011\000\002\022\007" +
    "\000\002\022\002\000\002\021\004\000\002\021\002\000" +
    "\002\023\010\000\002\024\010\000\002\024\002\000\002" +
    "\025\005\000\002\025\002\000\002\026\012\000\002\027" +
    "\004\000\002\027\007\000\002\030\004\000\002\030\002" +
    "\000\002\031\007\000\002\032\004\000\002\032\002\000" +
    "\002\033\006\000\002\034\004\000\002\034\002\000\002" +
    "\037\012\000\002\041\003\000\002\041\002\000\002\040" +
    "\006\000\002\040\004\000\002\016\005\000\002\007\010" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\015\004\000\002\015\004\000\002\014\003" +
    "\000\002\014\003\000\002\012\005\000\002\012\003\000" +
    "\002\012\002\000\002\006\005\000\002\006\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\004\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\003\000\002\004" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\034\005\uffc4\034\030\037\022\040\uffc4\042" +
    "\033\046\023\054\006\057\015\061\010\067\026\070\004" +
    "\073\013\074\007\001\002\000\004\037\210\001\002\000" +
    "\056\002\ufff6\005\ufff6\034\ufff6\037\ufff6\040\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\051\ufff6\052\ufff6\054" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\067\ufff6" +
    "\071\ufff6\073\ufff6\074\ufff6\001\002\000\030\014\044\021" +
    "\035\037\037\075\053\076\043\077\047\100\050\101\046" +
    "\102\036\103\042\104\051\001\002\000\030\014\044\021" +
    "\035\037\037\075\053\076\043\077\047\100\050\101\046" +
    "\102\036\103\042\104\051\001\002\000\034\005\uffdc\034" +
    "\uffdc\037\uffdc\040\uffdc\042\uffdc\046\uffdc\054\uffdc\057\uffdc" +
    "\061\uffdc\062\uffdc\067\uffdc\073\uffdc\074\uffdc\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\163\001\002\000\030" +
    "\014\044\021\035\037\037\075\053\076\043\077\047\100" +
    "\050\101\046\102\036\103\042\104\051\001\002\000\004" +
    "\041\161\001\002\000\030\014\044\021\035\037\037\075" +
    "\053\076\043\077\047\100\050\101\046\102\036\103\042" +
    "\104\051\001\002\000\034\002\000\005\uffc4\034\030\037" +
    "\022\040\uffc4\042\033\046\023\054\006\057\015\061\010" +
    "\067\026\073\013\074\007\001\002\000\004\041\152\001" +
    "\002\000\056\002\ufff8\005\ufff8\034\ufff8\037\ufff8\040\ufff8" +
    "\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\051\ufff8\052" +
    "\ufff8\054\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\067\ufff8\071\ufff8\073\ufff8\074\ufff8\001\002\000\056\002" +
    "\ufffa\005\ufffa\034\ufffa\037\ufffa\040\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\046\ufffa\051\ufffa\052\ufffa\054\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\067\ufffa\071\ufffa" +
    "\073\ufffa\074\ufffa\001\002\000\010\005\uffc5\035\uffc5\040" +
    "\uffc5\001\002\000\030\014\044\021\035\037\037\075\053" +
    "\076\043\077\047\100\050\101\046\102\036\103\042\104" +
    "\051\001\002\000\004\041\134\001\002\000\056\002\ufff5" +
    "\005\ufff5\034\ufff5\037\ufff5\040\ufff5\042\ufff5\043\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\051\ufff5\052\ufff5\054\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\062\ufff5\067\ufff5\071\ufff5\073" +
    "\ufff5\074\ufff5\001\002\000\030\014\044\021\035\037\037" +
    "\075\053\076\043\077\047\100\050\101\046\102\036\103" +
    "\042\104\051\001\002\000\056\002\ufff7\005\ufff7\034\ufff7" +
    "\037\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\051\ufff7\052\ufff7\054\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\067\ufff7\071\ufff7\073\ufff7\074\ufff7\001" +
    "\002\000\010\005\uffc4\035\uffc4\037\022\001\002\000\004" +
    "\041\121\001\002\000\006\005\115\040\116\001\002\000" +
    "\030\014\044\021\035\037\037\075\053\076\043\077\047" +
    "\100\050\101\046\102\036\103\042\104\051\001\002\000" +
    "\036\002\ufffd\005\ufffd\034\ufffd\037\ufffd\040\ufffd\042\ufffd" +
    "\046\ufffd\054\ufffd\057\ufffd\061\ufffd\067\ufffd\071\ufffd\073" +
    "\ufffd\074\ufffd\001\002\000\014\021\035\037\037\076\043" +
    "\100\050\104\051\001\002\000\072\002\uffcd\005\uffcd\034" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\067\uffcd\071\uffcd\073\uffcd\074\uffcd\106\uffcd\001" +
    "\002\000\126\002\uffb2\005\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\034\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\067\uffb2\071\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\105\uffb2\106\uffb2\001\002\000\122" +
    "\002\uffd0\005\uffd0\014\077\015\076\016\103\017\073\020" +
    "\102\023\110\024\100\025\101\026\074\027\075\030\106" +
    "\034\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\067\uffd0\071\uffd0\073\uffd0\074\uffd0\075\107" +
    "\106\uffd0\001\002\000\072\002\uffcb\005\uffcb\034\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb" +
    "\067\uffcb\071\uffcb\073\uffcb\074\uffcb\106\uffcb\001\002\000" +
    "\072\002\uffcc\005\uffcc\034\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\067\uffcc\071\uffcc\073" +
    "\uffcc\074\uffcc\106\uffcc\001\002\000\126\002\uffb5\005\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\034\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\067\uffb5\071\uffb5\073\uffb5\074\uffb5\075\uffb5\105\uffb5" +
    "\106\uffb5\001\002\000\006\076\055\100\054\001\002\000" +
    "\126\002\uffc2\005\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\034\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\067\uffc2\071\uffc2\073\uffc2\074" +
    "\uffc2\075\uffc2\105\uffc2\106\uffc2\001\002\000\072\002\uffce" +
    "\005\uffce\034\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\067\uffce\071\uffce\073\uffce\074\uffce" +
    "\106\uffce\001\002\000\072\002\uffcf\005\uffcf\034\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\067\uffcf\071\uffcf\073\uffcf\074\uffcf\106\uffcf\001\002\000" +
    "\126\002\uffb1\005\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\020\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\034\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\062\uffb1\067\uffb1\071\uffb1\073\uffb1\074" +
    "\uffb1\075\uffb1\105\uffb1\106\uffb1\001\002\000\014\021\035" +
    "\037\037\076\043\100\050\104\051\001\002\000\004\050" +
    "\057\001\002\000\006\076\055\100\054\001\002\000\072" +
    "\002\uffc7\005\uffc7\034\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\067\uffc7\071\uffc7\073\uffc7" +
    "\074\uffc7\106\uffc7\001\002\000\072\002\uffc8\005\uffc8\034" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\067\uffc8\071\uffc8\073\uffc8\074\uffc8\106\uffc8\001" +
    "\002\000\072\002\uffca\005\uffca\034\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\067\uffca\071" +
    "\uffca\073\uffca\074\uffca\106\uffca\001\002\000\032\005\uffc4" +
    "\034\030\037\022\040\uffc4\042\033\046\023\054\006\057" +
    "\015\061\010\067\026\073\013\074\007\001\002\000\010" +
    "\043\uffee\044\uffee\045\uffee\001\002\000\010\043\uffec\044" +
    "\063\045\064\001\002\000\004\043\071\001\002\000\032" +
    "\005\uffc4\034\030\037\022\040\uffc4\042\033\046\023\054" +
    "\006\057\015\061\010\067\026\073\013\074\007\001\002" +
    "\000\030\014\044\021\035\037\037\075\053\076\043\077" +
    "\047\100\050\101\046\102\036\103\042\104\051\001\002" +
    "\000\004\050\066\001\002\000\032\005\uffc4\034\030\037" +
    "\022\040\uffc4\042\033\046\023\054\006\057\015\061\010" +
    "\067\026\073\013\074\007\001\002\000\010\043\uffef\044" +
    "\uffef\045\uffef\001\002\000\004\043\uffed\001\002\000\056" +
    "\002\ufff0\005\ufff0\034\ufff0\037\ufff0\040\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\051\ufff0\052\ufff0\054\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\067\ufff0\071" +
    "\ufff0\073\ufff0\074\ufff0\001\002\000\034\014\077\015\076" +
    "\016\103\017\073\020\102\023\110\024\100\025\101\026" +
    "\074\027\075\030\106\075\107\105\105\001\002\000\014" +
    "\021\uffbe\037\uffbe\076\uffbe\100\uffbe\104\uffbe\001\002\000" +
    "\014\021\uffb8\037\uffb8\076\uffb8\100\uffb8\104\uffb8\001\002" +
    "\000\014\021\uffb7\037\uffb7\076\uffb7\100\uffb7\104\uffb7\001" +
    "\002\000\014\021\uffbc\037\uffbc\076\uffbc\100\uffbc\104\uffbc" +
    "\001\002\000\014\021\uffc0\037\uffc0\076\uffc0\100\uffc0\104" +
    "\uffc0\001\002\000\014\021\uffba\037\uffba\076\uffba\100\uffba" +
    "\104\uffba\001\002\000\014\021\uffb9\037\uffb9\076\uffb9\100" +
    "\uffb9\104\uffb9\001\002\000\014\021\uffbd\037\uffbd\076\uffbd" +
    "\100\uffbd\104\uffbd\001\002\000\014\021\uffbf\037\uffbf\076" +
    "\uffbf\100\uffbf\104\uffbf\001\002\000\014\021\035\037\037" +
    "\076\043\100\050\104\051\001\002\000\126\002\uffb3\005" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\034" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\067\uffb3\071\uffb3\073\uffb3\074\uffb3\075\uffb3\105" +
    "\uffb3\106\uffb3\001\002\000\014\021\uffb6\037\uffb6\076\uffb6" +
    "\100\uffb6\104\uffb6\001\002\000\014\021\uffc1\037\uffc1\076" +
    "\uffc1\100\uffc1\104\uffc1\001\002\000\014\021\uffbb\037\uffbb" +
    "\076\uffbb\100\uffbb\104\uffbb\001\002\000\126\002\uffc3\005" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\034" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\067\uffc3\071\uffc3\073\uffc3\074\uffc3\075\uffc3\105" +
    "\uffc3\106\uffc3\001\002\000\072\002\uffc9\005\uffc9\034\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\067\uffc9\071\uffc9\073\uffc9\074\uffc9\106\uffc9\001\002" +
    "\000\034\014\077\015\076\016\103\017\073\020\102\022" +
    "\114\023\110\024\100\025\101\026\074\027\075\030\106" +
    "\075\107\001\002\000\126\002\uffb4\005\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\034\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\067\uffb4" +
    "\071\uffb4\073\uffb4\074\uffb4\075\uffb4\105\uffb4\106\uffb4\001" +
    "\002\000\004\037\120\001\002\000\030\014\044\021\035" +
    "\037\037\075\053\076\043\077\047\100\050\101\046\102" +
    "\036\103\042\104\051\001\002\000\004\041\uffd6\001\002" +
    "\000\010\005\uffc6\035\uffc6\040\uffc6\001\002\000\056\002" +
    "\ufff9\005\ufff9\034\ufff9\037\ufff9\040\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\051\ufff9\052\ufff9\054\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\067\ufff9\071\ufff9" +
    "\073\ufff9\074\ufff9\001\002\000\006\005\115\035\123\001" +
    "\002\000\012\010\130\011\127\012\124\013\126\001\002" +
    "\000\010\005\uffd2\022\uffd2\036\uffd2\001\002\000\004\036" +
    "\131\001\002\000\010\005\uffd1\022\uffd1\036\uffd1\001\002" +
    "\000\010\005\uffd3\022\uffd3\036\uffd3\001\002\000\010\005" +
    "\uffd4\022\uffd4\036\uffd4\001\002\000\030\014\044\021\035" +
    "\037\037\075\053\076\043\077\047\100\050\101\046\102" +
    "\036\103\042\104\051\001\002\000\004\041\uffd5\001\002" +
    "\000\004\041\ufff3\001\002\000\056\002\ufffb\005\ufffb\034" +
    "\ufffb\037\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\051\ufffb\052\ufffb\054\ufffb\056\ufffb\057\ufffb\060" +
    "\ufffb\061\ufffb\062\ufffb\067\ufffb\071\ufffb\073\ufffb\074\ufffb" +
    "\001\002\000\004\047\136\001\002\000\010\044\uffe9\051" +
    "\uffe9\052\uffe9\001\002\000\010\044\141\051\uffe7\052\142" +
    "\001\002\000\004\051\151\001\002\000\004\050\147\001" +
    "\002\000\030\014\044\021\035\037\037\075\053\076\043" +
    "\077\047\100\050\101\046\102\036\103\042\104\051\001" +
    "\002\000\004\053\144\001\002\000\004\050\145\001\002" +
    "\000\032\005\uffc4\034\030\037\022\040\uffc4\042\033\046" +
    "\023\054\006\057\015\061\010\067\026\073\013\074\007" +
    "\001\002\000\010\044\uffea\051\uffea\052\uffea\001\002\000" +
    "\032\005\uffc4\034\030\037\022\040\uffc4\042\033\046\023" +
    "\054\006\057\015\061\010\067\026\073\013\074\007\001" +
    "\002\000\004\051\uffe8\001\002\000\056\002\uffeb\005\uffeb" +
    "\034\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\051\uffeb\052\uffeb\054\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\067\uffeb\071\uffeb\073\uffeb\074" +
    "\uffeb\001\002\000\056\002\ufff4\005\ufff4\034\ufff4\037\ufff4" +
    "\040\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\051" +
    "\ufff4\052\ufff4\054\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\062\ufff4\067\ufff4\071\ufff4\073\ufff4\074\ufff4\001\002\000" +
    "\036\002\ufffe\005\ufffe\034\ufffe\037\ufffe\040\ufffe\042\ufffe" +
    "\046\ufffe\054\ufffe\057\ufffe\061\ufffe\067\ufffe\071\ufffe\073" +
    "\ufffe\074\ufffe\001\002\000\004\047\155\001\002\000\034" +
    "\005\uffdf\034\uffdf\037\uffdf\040\uffdf\042\uffdf\046\uffdf\054" +
    "\uffdf\057\uffdf\060\uffdf\061\uffdf\067\uffdf\073\uffdf\074\uffdf" +
    "\001\002\000\034\005\uffc4\034\030\037\022\040\uffc4\042" +
    "\033\046\023\054\006\057\015\060\157\061\010\067\026" +
    "\073\013\074\007\001\002\000\056\002\uffe1\005\uffe1\034" +
    "\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\051\uffe1\052\uffe1\054\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\067\uffe1\071\uffe1\073\uffe1\074\uffe1" +
    "\001\002\000\034\005\uffe0\034\uffe0\037\uffe0\040\uffe0\042" +
    "\uffe0\046\uffe0\054\uffe0\057\uffe0\060\uffe0\061\uffe0\067\uffe0" +
    "\073\uffe0\074\uffe0\001\002\000\056\002\ufffc\005\ufffc\034" +
    "\ufffc\037\ufffc\040\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\051\ufffc\052\ufffc\054\ufffc\056\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\062\ufffc\067\ufffc\071\ufffc\073\ufffc\074\ufffc" +
    "\001\002\000\004\041\ufff2\001\002\000\004\002\001\001" +
    "\002\000\034\005\uffc4\034\030\037\022\040\uffc4\042\033" +
    "\046\023\054\006\057\015\061\010\062\165\067\026\073" +
    "\013\074\007\001\002\000\030\014\044\021\035\037\037" +
    "\075\053\076\043\077\047\100\050\101\046\102\036\103" +
    "\042\104\051\001\002\000\034\005\uffdd\034\uffdd\037\uffdd" +
    "\040\uffdd\042\uffdd\046\uffdd\054\uffdd\057\uffdd\061\uffdd\062" +
    "\uffdd\067\uffdd\073\uffdd\074\uffdd\001\002\000\056\002\uffde" +
    "\005\uffde\034\uffde\037\uffde\040\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\051\uffde\052\uffde\054\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\067\uffde\071\uffde\073" +
    "\uffde\074\uffde\001\002\000\004\041\ufff1\001\002\000\004" +
    "\040\172\001\002\000\030\014\044\021\035\037\037\075" +
    "\053\076\043\077\047\100\050\101\046\102\036\103\042" +
    "\104\051\001\002\000\004\055\174\001\002\000\030\014" +
    "\044\021\035\037\037\075\053\076\043\077\047\100\050" +
    "\101\046\102\036\103\042\104\051\001\002\000\006\047" +
    "\200\106\177\001\002\000\004\056\207\001\002\000\004" +
    "\107\203\001\002\000\034\005\uffe2\034\uffe2\037\uffe2\040" +
    "\uffe2\042\uffe2\046\uffe2\054\uffe2\056\uffe2\057\uffe2\061\uffe2" +
    "\067\uffe2\073\uffe2\074\uffe2\001\002\000\034\005\uffc4\034" +
    "\030\037\022\040\uffc4\042\033\046\023\054\006\056\uffe5" +
    "\057\015\061\010\067\026\073\013\074\007\001\002\000" +
    "\034\005\uffe3\034\uffe3\037\uffe3\040\uffe3\042\uffe3\046\uffe3" +
    "\054\uffe3\056\uffe3\057\uffe3\061\uffe3\067\uffe3\073\uffe3\074" +
    "\uffe3\001\002\000\030\014\044\021\035\037\037\075\053" +
    "\076\043\077\047\100\050\101\046\102\036\103\042\104" +
    "\051\001\002\000\004\047\205\001\002\000\034\005\uffe2" +
    "\034\uffe2\037\uffe2\040\uffe2\042\uffe2\046\uffe2\054\uffe2\056" +
    "\uffe2\057\uffe2\061\uffe2\067\uffe2\073\uffe2\074\uffe2\001\002" +
    "\000\034\005\uffc4\034\030\037\022\040\uffc4\042\033\046" +
    "\023\054\006\056\uffe4\057\015\061\010\067\026\073\013" +
    "\074\007\001\002\000\056\002\uffe6\005\uffe6\034\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\051\uffe6\052\uffe6\054\uffe6\056\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\062\uffe6\067\uffe6\071\uffe6\073\uffe6\074\uffe6\001\002" +
    "\000\004\065\211\001\002\000\004\021\212\001\002\000" +
    "\006\022\uffd9\037\215\001\002\000\006\005\222\022\uffda" +
    "\001\002\000\004\022\217\001\002\000\012\010\130\011" +
    "\127\012\124\013\126\001\002\000\006\005\uffd7\022\uffd7" +
    "\001\002\000\032\005\uffc4\034\030\037\022\040\uffc4\042" +
    "\033\046\023\054\006\057\015\061\010\067\026\073\013" +
    "\074\007\001\002\000\034\005\uffc4\034\030\037\022\040" +
    "\uffc4\042\033\046\023\054\006\057\015\061\010\067\026" +
    "\071\221\073\013\074\007\001\002\000\004\002\uffdb\001" +
    "\002\000\004\037\223\001\002\000\012\010\130\011\127" +
    "\012\124\013\126\001\002\000\006\005\uffd8\022\uffd8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\036\002\011\003\015\005\033\007\013\012" +
    "\031\016\023\017\020\020\030\023\017\026\026\031\004" +
    "\033\024\036\016\037\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\044\006\037\011\170\015\040" +
    "\001\001\000\012\004\044\006\037\011\167\015\040\001" +
    "\001\000\004\034\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\044\006\037\011\161\015\040\001" +
    "\001\000\002\001\001\000\012\004\044\006\037\011\153" +
    "\015\040\001\001\000\030\005\152\007\013\012\031\016" +
    "\023\017\020\020\030\023\017\026\026\031\004\033\024" +
    "\036\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\044\006\037" +
    "\011\134\015\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\044\006\037\011\132\015\040\001\001" +
    "\000\002\001\001\000\004\012\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\044\006\037\011\051" +
    "\015\040\001\001\000\002\001\001\000\006\004\044\006" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\044\006\071\001\001\000\002\001\001\000\004" +
    "\014\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\057\007\013\012\031\016\023" +
    "\017\020\020\030\023\017\026\026\031\004\033\024\036" +
    "\016\001\001\000\004\022\060\001\001\000\004\021\061" +
    "\001\001\000\002\001\001\000\030\005\067\007\013\012" +
    "\031\016\023\017\020\020\030\023\017\026\026\031\004" +
    "\033\024\036\016\001\001\000\012\004\044\006\037\011" +
    "\064\015\040\001\001\000\002\001\001\000\030\005\066" +
    "\007\013\012\031\016\023\017\020\020\030\023\017\026" +
    "\026\031\004\033\024\036\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\044\006\037\011\116\015\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\044\006\037\011\131" +
    "\015\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\136\001\001" +
    "\000\004\025\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\044\006\037\011\142\015\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\145\007" +
    "\013\012\031\016\023\017\020\020\030\023\017\026\026" +
    "\031\004\033\024\036\016\001\001\000\002\001\001\000" +
    "\030\005\147\007\013\012\031\016\023\017\020\020\030" +
    "\023\017\026\026\031\004\033\024\036\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\155\001\001\000" +
    "\030\005\157\007\013\012\031\016\023\017\020\020\030" +
    "\023\017\026\026\031\004\033\024\036\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\165\007\013\012" +
    "\031\016\023\017\020\020\030\023\017\026\026\031\004" +
    "\033\024\036\016\001\001\000\012\004\044\006\037\011" +
    "\166\015\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\044\006" +
    "\037\011\172\015\040\001\001\000\002\001\001\000\012" +
    "\004\044\006\037\011\174\015\040\001\001\000\004\027" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\200\001\001\000\030\005\201\007\013\012\031\016" +
    "\023\017\020\020\030\023\017\026\026\031\004\033\024" +
    "\036\016\001\001\000\002\001\001\000\012\004\044\006" +
    "\037\011\203\015\040\001\001\000\002\001\001\000\004" +
    "\030\205\001\001\000\030\005\201\007\013\012\031\016" +
    "\023\017\020\020\030\023\017\026\026\031\004\033\024" +
    "\036\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\212\041\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\215\001\001\000" +
    "\002\001\001\000\032\003\217\005\033\007\013\012\031" +
    "\016\023\017\020\020\030\023\017\026\026\031\004\033" +
    "\024\036\016\001\001\000\030\005\152\007\013\012\031" +
    "\016\023\017\020\020\030\023\017\026\026\031\004\033" +
    "\024\036\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\223\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion start_val = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= INSTRUCCIONES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S0 ::= METODOS 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCIONES ESTRUCTURA 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= ESTRUCTURA 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURA ::= DECLARACION punto_coma 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURA ::= ASIGNACION punto_coma 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURA ::= IF 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA ::= IMPRESION punto_coma 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURA ::= SWITCH 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA ::= CICLO_PARA 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA ::= CICLO_MIENTRAS 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURA ::= CICLO_REPETIR 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURA ::= RETORNO punto_coma 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RETORNO ::= retornar EXPRESION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IMPRESION ::= imprimir EXPRESION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPRESION ::= imprimir_nl EXPRESION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IF ::= si EXPRESION entonces ESTRUCTURA ELSE_IF ELSE fin_si 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELSE_IF ::= ELSE_IF o_si EXPRESION entonces ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELSE_IF ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELSE ::= de_lo_contrario ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SWITCH ::= segun EXPRESION hacer SWITCH_CASE SWITCH_ELSE fin_segun 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SWITCH_CASE ::= SWITCH_CASE interrogacion_A EXPRESION interrogacion_B entonces ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SWITCH_CASE ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SWITCH_ELSE ::= de_lo_contrario entonces ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_ELSE",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SWITCH_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_ELSE",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CICLO_PARA ::= para EXPRESION asignacion EXPRESION hasta EXPRESION CICLO_PARA_DEFINIDO fin_para 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CICLO_PARA_DEFINIDO ::= hacer SUB_CICLO_PARA_DEFINIDO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA_DEFINIDO",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CICLO_PARA_DEFINIDO ::= con incremental EXPRESION hacer SUB_CICLO_PARA_DEFINIDO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA_DEFINIDO",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUB_CICLO_PARA_DEFINIDO ::= SUB_CICLO_PARA_DEFINIDO ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_CICLO_PARA_DEFINIDO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUB_CICLO_PARA_DEFINIDO ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_CICLO_PARA_DEFINIDO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CICLO_MIENTRAS ::= mientras EXPRESION hacer CICLO_MIENTRAS_DEFINIDO fin_mientras 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CICLO_MIENTRAS_DEFINIDO ::= CICLO_MIENTRAS_DEFINIDO ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS_DEFINIDO",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CICLO_MIENTRAS_DEFINIDO ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS_DEFINIDO",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CICLO_REPETIR ::= repetir CICLO_REPETIR_DEFINIDO hasta_que EXPRESION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CICLO_REPETIR_DEFINIDO ::= CICLO_REPETIR_DEFINIDO ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR_DEFINIDO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CICLO_REPETIR_DEFINIDO ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR_DEFINIDO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODOS ::= metodo nombre_variable con_parametros parentesis_A SUB2_METODOS parentesis_B INSTRUCCIONES fin_metodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SUB2_METODOS ::= SUB_METODOS 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_METODOS",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SUB2_METODOS ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_METODOS",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SUB_METODOS ::= SUB_METODOS coma nombre_variable TIPO_DE_DATO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_METODOS",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SUB_METODOS ::= nombre_variable TIPO_DE_DATO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_METODOS",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= NOMBRE_VARIABLES asignacion EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 System.out.println(a);  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= prIngresar NOMBRE_VARIABLES prComo TIPO_DE_DATO prCon_valor EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion f = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 System.out.println(a+b+c+d+e+f);  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_DE_DATO ::= prNumero 
            {
              Instruccion RESULT =null;
		System.out.println("numero");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_DE_DATO ::= prCadena 
            {
              Instruccion RESULT =null;
		System.out.println("cadena");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_DE_DATO ::= prBoolean 
            {
              Instruccion RESULT =null;
		System.out.println("prBoolean");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_DE_DATO ::= prCaracter 
            {
              Instruccion RESULT =null;
		System.out.println("prCaracter");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= OPERACION 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= String 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		System.out.println(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= Verdadero 
            {
              Instruccion RESULT =null;
		System.out.println("Verdadero");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= Falso 
            {
              Instruccion RESULT =null;
		System.out.println("Falso");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= Char 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		System.out.println(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= UNARIO 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // UNARIO ::= mas NUMERICO 
            {
              Object RESULT =null;
		System.out.println("UN_MAS");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // UNARIO ::= menos NUMERICO 
            {
              Object RESULT =null;
		System.out.println("UN_MENOS");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NUMERICO ::= num 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NUMERICO",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NUMERICO ::= Double 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NUMERICO",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NOMBRE_VARIABLES ::= NOMBRE_VARIABLES coma nombre_variable 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_VARIABLES",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NOMBRE_VARIABLES ::= nombre_variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		System.out.println(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_VARIABLES",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NOMBRE_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_VARIABLES",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION ::= OPERACION OPERADORES VALORES 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION ::= VALORES 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERADORES ::= mas 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADORES ::= menos 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADORES ::= divicion 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADORES ::= potencia 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADORES ::= mod 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADORES ::= multiplicacion 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADORES ::= mayor 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERADORES ::= menor 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERADORES ::= mayor_o_igual 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADORES ::= menor_o_igual 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADORES ::= es_igual 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADORES ::= es_diferente 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALORES ::= num 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		System.out.println(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALORES ::= parentesis_A OPERACION parentesis_B 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALORES ::= corchete_A OPERACION corchete_B 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALORES ::= nombre_variable 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALORES ::= Double 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
