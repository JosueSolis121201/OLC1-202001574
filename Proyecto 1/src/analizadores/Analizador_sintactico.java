
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import Instrucciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\003\005\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\004\004\000\002\004\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\006\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\036\004\000\002\020\004" +
    "\000\002\020\004\000\002\017\011\000\002\022\007\000" +
    "\002\022\002\000\002\021\004\000\002\021\002\000\002" +
    "\023\010\000\002\024\010\000\002\024\002\000\002\025" +
    "\005\000\002\025\002\000\002\026\012\000\002\027\004" +
    "\000\002\027\007\000\002\030\004\000\002\030\002\000" +
    "\002\031\007\000\002\032\004\000\002\032\002\000\002" +
    "\033\006\000\002\034\004\000\002\034\002\000\002\037" +
    "\007\000\002\042\006\000\002\042\002\000\002\041\003" +
    "\000\002\041\002\000\002\040\006\000\002\040\004\000" +
    "\002\043\010\000\002\046\006\000\002\046\002\000\002" +
    "\045\003\000\002\045\002\000\002\044\006\000\002\044" +
    "\004\000\002\047\006\000\002\052\005\000\002\052\002" +
    "\000\002\051\003\000\002\051\002\000\002\050\006\000" +
    "\002\050\004\000\002\016\005\000\002\010\010\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\015\004\000\002\015\004\000\002" +
    "\014\003\000\002\014\003\000\002\013\005\000\002\013" +
    "\003\000\002\007\005\000\002\007\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\006\004\001\002\000\034\034\035\037" +
    "\026\042\040\046\027\054\012\057\022\061\014\063\041" +
    "\067\032\070\010\072\034\073\017\074\013\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\054" +
    "\007\ufff3\034\ufff3\037\ufff3\042\ufff3\043\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\051\ufff3\052\ufff3\054\ufff3\056\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\064\ufff3\067\ufff3\071\ufff3\073" +
    "\ufff3\074\ufff3\001\002\000\004\037\256\001\002\000\004" +
    "\007\ufffc\001\002\000\032\014\100\021\070\033\071\037" +
    "\073\075\107\076\077\077\103\100\104\101\102\102\072" +
    "\103\076\104\106\001\002\000\032\014\100\021\070\033" +
    "\071\037\073\075\107\076\077\077\103\100\104\101\102" +
    "\102\072\103\076\104\106\001\002\000\030\034\uffd9\037" +
    "\uffd9\042\uffd9\046\uffd9\054\uffd9\057\uffd9\061\uffd9\062\uffd9" +
    "\067\uffd9\073\uffd9\074\uffd9\001\002\000\004\007\ufffe\001" +
    "\002\000\004\007\231\001\002\000\032\014\100\021\070" +
    "\033\071\037\073\075\107\076\077\077\103\100\104\101" +
    "\102\102\072\103\076\104\106\001\002\000\004\041\227" +
    "\001\002\000\030\007\uffff\034\035\037\026\042\040\046" +
    "\027\054\012\057\022\061\014\067\032\073\017\074\013" +
    "\001\002\000\032\014\100\021\070\033\071\037\073\075" +
    "\107\076\077\077\103\100\104\101\102\102\072\103\076" +
    "\104\106\001\002\000\054\007\ufff5\034\ufff5\037\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\051\ufff5\052\ufff5" +
    "\054\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\064" +
    "\ufff5\067\ufff5\071\ufff5\073\ufff5\074\ufff5\001\002\000\004" +
    "\041\221\001\002\000\054\007\ufff7\034\ufff7\037\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\051\ufff7\052\ufff7" +
    "\054\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\064" +
    "\ufff7\067\ufff7\071\ufff7\073\ufff7\074\ufff7\001\002\000\010" +
    "\005\uffb1\035\uffb1\040\uffb1\001\002\000\032\014\100\021" +
    "\070\033\071\037\073\075\107\076\077\077\103\100\104" +
    "\101\102\102\072\103\076\104\106\001\002\000\004\041" +
    "\203\001\002\000\054\007\ufff2\034\ufff2\037\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\051\ufff2\052\ufff2\054" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\064\ufff2" +
    "\067\ufff2\071\ufff2\073\ufff2\074\ufff2\001\002\000\032\014" +
    "\100\021\070\033\071\037\073\075\107\076\077\077\103" +
    "\100\104\101\102\102\072\103\076\104\106\001\002\000" +
    "\054\007\ufff4\034\ufff4\037\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\051\ufff4\052\ufff4\054\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\064\ufff4\067\ufff4\071\ufff4" +
    "\073\ufff4\074\ufff4\001\002\000\004\037\166\001\002\000" +
    "\004\037\026\001\002\000\004\041\160\001\002\000\006" +
    "\005\154\040\155\001\002\000\032\014\100\021\070\033" +
    "\071\037\073\075\107\076\077\077\103\100\104\101\102" +
    "\102\072\103\076\104\106\001\002\000\004\037\044\001" +
    "\002\000\046\007\ufffa\034\ufffa\037\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\046\ufffa\051\ufffa\052\ufffa\054\ufffa\057" +
    "\ufffa\061\ufffa\064\ufffa\067\ufffa\071\ufffa\073\ufffa\074\ufffa" +
    "\001\002\000\004\007\ufffd\001\002\000\012\010\051\011" +
    "\050\012\045\013\046\001\002\000\036\005\uffbf\022\uffbf" +
    "\034\uffbf\036\uffbf\037\uffbf\042\uffbf\046\uffbf\054\uffbf\057" +
    "\uffbf\061\uffbf\065\uffbf\067\uffbf\073\uffbf\074\uffbf\001\002" +
    "\000\036\005\uffbe\022\uffbe\034\uffbe\036\uffbe\037\uffbe\042" +
    "\uffbe\046\uffbe\054\uffbe\057\uffbe\061\uffbe\065\uffbe\067\uffbe" +
    "\073\uffbe\074\uffbe\001\002\000\030\034\uffcf\037\uffcf\042" +
    "\uffcf\046\uffcf\054\uffcf\057\uffcf\061\uffcf\065\053\067\uffcf" +
    "\073\uffcf\074\uffcf\001\002\000\036\005\uffc0\022\uffc0\034" +
    "\uffc0\036\uffc0\037\uffc0\042\uffc0\046\uffc0\054\uffc0\057\uffc0" +
    "\061\uffc0\065\uffc0\067\uffc0\073\uffc0\074\uffc0\001\002\000" +
    "\036\005\uffc1\022\uffc1\034\uffc1\036\uffc1\037\uffc1\042\uffc1" +
    "\046\uffc1\054\uffc1\057\uffc1\061\uffc1\065\uffc1\067\uffc1\073" +
    "\uffc1\074\uffc1\001\002\000\026\034\035\037\026\042\040" +
    "\046\027\054\012\057\022\061\014\067\032\073\017\074" +
    "\013\001\002\000\004\021\054\001\002\000\006\022\uffcd" +
    "\037\057\001\002\000\006\005\062\022\uffce\001\002\000" +
    "\004\022\061\001\002\000\012\010\051\011\050\012\045" +
    "\013\046\001\002\000\006\005\uffcb\022\uffcb\001\002\000" +
    "\026\034\uffd0\037\uffd0\042\uffd0\046\uffd0\054\uffd0\057\uffd0" +
    "\061\uffd0\067\uffd0\073\uffd0\074\uffd0\001\002\000\004\037" +
    "\063\001\002\000\012\010\051\011\050\012\045\013\046" +
    "\001\002\000\006\005\uffcc\022\uffcc\001\002\000\030\034" +
    "\035\037\026\042\040\046\027\054\012\057\022\061\014" +
    "\064\066\067\032\073\017\074\013\001\002\000\004\007" +
    "\uffd1\001\002\000\046\007\ufffb\034\ufffb\037\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\051\ufffb\052\ufffb\054" +
    "\ufffb\057\ufffb\061\ufffb\064\ufffb\067\ufffb\071\ufffb\073\ufffb" +
    "\074\ufffb\001\002\000\014\021\070\037\073\076\077\100" +
    "\104\104\106\001\002\000\072\007\uffb7\034\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\064" +
    "\uffb7\067\uffb7\071\uffb7\073\uffb7\074\uffb7\106\uffb7\001\002" +
    "\000\072\007\uffba\034\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\064\uffba\067\uffba\071\uffba" +
    "\073\uffba\074\uffba\106\uffba\001\002\000\134\007\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c" +
    "\060\uff9c\061\uff9c\062\uff9c\064\uff9c\067\uff9c\071\uff9c\073" +
    "\uff9c\074\uff9c\075\uff9c\105\uff9c\106\uff9c\001\002\000\130" +
    "\007\uffbd\014\122\015\120\016\127\017\114\020\126\023" +
    "\133\024\124\025\125\026\115\027\117\030\132\031\121" +
    "\032\123\033\116\034\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd\067\uffbd\071\uffbd" +
    "\073\uffbd\074\uffbd\075\134\106\uffbd\001\002\000\072\007" +
    "\uffb8\034\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\064\uffb8\067\uffb8\071\uffb8\073\uffb8\074" +
    "\uffb8\106\uffb8\001\002\000\072\007\uffb9\034\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\064" +
    "\uffb9\067\uffb9\071\uffb9\073\uffb9\074\uffb9\106\uffb9\001\002" +
    "\000\134\007\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\064\uff9f" +
    "\067\uff9f\071\uff9f\073\uff9f\074\uff9f\075\uff9f\105\uff9f\106" +
    "\uff9f\001\002\000\006\076\111\100\110\001\002\000\134" +
    "\007\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\064\uffaf\067\uffaf" +
    "\071\uffaf\073\uffaf\074\uffaf\075\uffaf\105\uffaf\106\uffaf\001" +
    "\002\000\072\007\uffbb\034\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\064\uffbb\067\uffbb\071" +
    "\uffbb\073\uffbb\074\uffbb\106\uffbb\001\002\000\072\007\uffbc" +
    "\034\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\062\uffbc\064\uffbc\067\uffbc\071\uffbc\073\uffbc\074\uffbc" +
    "\106\uffbc\001\002\000\134\007\uff9b\014\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b" +
    "\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b" +
    "\062\uff9b\064\uff9b\067\uff9b\071\uff9b\073\uff9b\074\uff9b\075" +
    "\uff9b\105\uff9b\106\uff9b\001\002\000\004\050\136\001\002" +
    "\000\014\021\070\037\073\076\077\100\104\104\106\001" +
    "\002\000\006\076\111\100\110\001\002\000\072\007\uffb3" +
    "\034\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\064\uffb3\067\uffb3\071\uffb3\073\uffb3\074\uffb3" +
    "\106\uffb3\001\002\000\072\007\uffb4\034\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\064\uffb4" +
    "\067\uffb4\071\uffb4\073\uffb4\074\uffb4\106\uffb4\001\002\000" +
    "\072\007\uffb6\034\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\064\uffb6\067\uffb6\071\uffb6\073" +
    "\uffb6\074\uffb6\106\uffb6\001\002\000\042\014\122\015\120" +
    "\016\127\017\114\020\126\023\133\024\124\025\125\026" +
    "\115\027\117\030\132\031\121\032\123\033\116\075\134" +
    "\105\131\001\002\000\014\021\uffab\037\uffab\076\uffab\100" +
    "\uffab\104\uffab\001\002\000\014\021\uffa5\037\uffa5\076\uffa5" +
    "\100\uffa5\104\uffa5\001\002\000\014\021\uffa0\037\uffa0\076" +
    "\uffa0\100\uffa0\104\uffa0\001\002\000\014\021\uffa4\037\uffa4" +
    "\076\uffa4\100\uffa4\104\uffa4\001\002\000\014\021\uffa9\037" +
    "\uffa9\076\uffa9\100\uffa9\104\uffa9\001\002\000\014\021\uffa2" +
    "\037\uffa2\076\uffa2\100\uffa2\104\uffa2\001\002\000\014\021" +
    "\uffad\037\uffad\076\uffad\100\uffad\104\uffad\001\002\000\014" +
    "\021\uffa1\037\uffa1\076\uffa1\100\uffa1\104\uffa1\001\002\000" +
    "\014\021\uffa7\037\uffa7\076\uffa7\100\uffa7\104\uffa7\001\002" +
    "\000\014\021\uffa6\037\uffa6\076\uffa6\100\uffa6\104\uffa6\001" +
    "\002\000\014\021\uffaa\037\uffaa\076\uffaa\100\uffaa\104\uffaa" +
    "\001\002\000\014\021\uffac\037\uffac\076\uffac\100\uffac\104" +
    "\uffac\001\002\000\014\021\070\037\073\076\077\100\104" +
    "\104\106\001\002\000\134\007\uff9d\014\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\020\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\064\uff9d\067\uff9d\071\uff9d\073\uff9d\074\uff9d\075" +
    "\uff9d\105\uff9d\106\uff9d\001\002\000\014\021\uffa3\037\uffa3" +
    "\076\uffa3\100\uffa3\104\uffa3\001\002\000\014\021\uffa8\037" +
    "\uffa8\076\uffa8\100\uffa8\104\uffa8\001\002\000\014\021\uffae" +
    "\037\uffae\076\uffae\100\uffae\104\uffae\001\002\000\134\007" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0\067\uffb0\071" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\105\uffb0\106\uffb0\001\002" +
    "\000\026\034\035\037\026\042\040\046\027\054\012\057" +
    "\022\061\014\067\032\073\017\074\013\001\002\000\034" +
    "\034\035\037\026\042\040\043\uffeb\044\uffeb\045\uffeb\046" +
    "\027\054\012\057\022\061\014\067\032\073\017\074\013" +
    "\001\002\000\010\043\uffe9\044\142\045\143\001\002\000" +
    "\004\043\150\001\002\000\026\034\035\037\026\042\040" +
    "\046\027\054\012\057\022\061\014\067\032\073\017\074" +
    "\013\001\002\000\032\014\100\021\070\033\071\037\073" +
    "\075\107\076\077\077\103\100\104\101\102\102\072\103" +
    "\076\104\106\001\002\000\004\050\145\001\002\000\026" +
    "\034\035\037\026\042\040\046\027\054\012\057\022\061" +
    "\014\067\032\073\017\074\013\001\002\000\034\034\035" +
    "\037\026\042\040\043\uffec\044\uffec\045\uffec\046\027\054" +
    "\012\057\022\061\014\067\032\073\017\074\013\001\002" +
    "\000\030\034\035\037\026\042\040\043\uffea\046\027\054" +
    "\012\057\022\061\014\067\032\073\017\074\013\001\002" +
    "\000\054\007\uffed\034\uffed\037\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\051\uffed\052\uffed\054\uffed\056\uffed" +
    "\057\uffed\060\uffed\061\uffed\062\uffed\064\uffed\067\uffed\071" +
    "\uffed\073\uffed\074\uffed\001\002\000\072\007\uffb5\034\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\064\uffb5\067\uffb5\071\uffb5\073\uffb5\074\uffb5\106\uffb5" +
    "\001\002\000\042\014\122\015\120\016\127\017\114\020" +
    "\126\022\153\023\133\024\124\025\125\026\115\027\117" +
    "\030\132\031\121\032\123\033\116\075\134\001\002\000" +
    "\134\007\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064\uff9e\067" +
    "\uff9e\071\uff9e\073\uff9e\074\uff9e\075\uff9e\105\uff9e\106\uff9e" +
    "\001\002\000\004\037\157\001\002\000\032\014\100\021" +
    "\070\033\071\037\073\075\107\076\077\077\103\100\104" +
    "\101\102\102\072\103\076\104\106\001\002\000\004\041" +
    "\uffc3\001\002\000\010\005\uffb2\035\uffb2\040\uffb2\001\002" +
    "\000\054\007\ufff6\034\ufff6\037\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\051\ufff6\052\ufff6\054\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\ufff6\064\ufff6\067\ufff6\071" +
    "\ufff6\073\ufff6\074\ufff6\001\002\000\006\005\154\035\162" +
    "\001\002\000\012\010\051\011\050\012\045\013\046\001" +
    "\002\000\004\036\164\001\002\000\032\014\100\021\070" +
    "\033\071\037\073\075\107\076\077\077\103\100\104\101" +
    "\102\102\072\103\076\104\106\001\002\000\004\041\uffc2" +
    "\001\002\000\006\021\167\041\uffc8\001\002\000\006\022" +
    "\uffc6\037\173\001\002\000\004\041\171\001\002\000\004" +
    "\007\uffca\001\002\000\004\022\201\001\002\000\012\010" +
    "\051\011\050\012\045\013\046\001\002\000\006\005\175" +
    "\022\uffc7\001\002\000\004\037\176\001\002\000\012\010" +
    "\051\011\050\012\045\013\046\001\002\000\006\005\uffc5" +
    "\022\uffc5\001\002\000\006\005\uffc4\022\uffc4\001\002\000" +
    "\004\041\uffc9\001\002\000\004\041\ufff0\001\002\000\054" +
    "\007\ufff8\034\ufff8\037\ufff8\042\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\051\ufff8\052\ufff8\054\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\064\ufff8\067\ufff8\071\ufff8\073" +
    "\ufff8\074\ufff8\001\002\000\004\047\205\001\002\000\010" +
    "\044\uffe6\051\uffe6\052\uffe6\001\002\000\010\044\210\051" +
    "\uffe4\052\211\001\002\000\004\051\220\001\002\000\004" +
    "\050\216\001\002\000\032\014\100\021\070\033\071\037" +
    "\073\075\107\076\077\077\103\100\104\101\102\102\072" +
    "\103\076\104\106\001\002\000\004\053\213\001\002\000" +
    "\004\050\214\001\002\000\026\034\035\037\026\042\040" +
    "\046\027\054\012\057\022\061\014\067\032\073\017\074" +
    "\013\001\002\000\034\034\035\037\026\042\040\044\uffe7" +
    "\046\027\051\uffe7\052\uffe7\054\012\057\022\061\014\067" +
    "\032\073\017\074\013\001\002\000\026\034\035\037\026" +
    "\042\040\046\027\054\012\057\022\061\014\067\032\073" +
    "\017\074\013\001\002\000\030\034\035\037\026\042\040" +
    "\046\027\051\uffe5\054\012\057\022\061\014\067\032\073" +
    "\017\074\013\001\002\000\054\007\uffe8\034\uffe8\037\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\051\uffe8\052" +
    "\uffe8\054\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\064\uffe8\067\uffe8\071\uffe8\073\uffe8\074\uffe8\001\002\000" +
    "\054\007\ufff1\034\ufff1\037\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\046\ufff1\051\ufff1\052\ufff1\054\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\064\ufff1\067\ufff1\071\ufff1" +
    "\073\ufff1\074\ufff1\001\002\000\004\047\223\001\002\000" +
    "\030\034\uffdc\037\uffdc\042\uffdc\046\uffdc\054\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\067\uffdc\073\uffdc\074\uffdc\001\002\000" +
    "\030\034\035\037\026\042\040\046\027\054\012\057\022" +
    "\060\225\061\014\067\032\073\017\074\013\001\002\000" +
    "\054\007\uffde\034\uffde\037\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\046\uffde\051\uffde\052\uffde\054\uffde\056\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\064\uffde\067\uffde\071\uffde" +
    "\073\uffde\074\uffde\001\002\000\030\034\uffdd\037\uffdd\042" +
    "\uffdd\046\uffdd\054\uffdd\057\uffdd\060\uffdd\061\uffdd\067\uffdd" +
    "\073\uffdd\074\uffdd\001\002\000\054\007\ufff9\034\ufff9\037" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\051\ufff9" +
    "\052\ufff9\054\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062" +
    "\ufff9\064\ufff9\067\ufff9\071\ufff9\073\ufff9\074\ufff9\001\002" +
    "\000\004\041\uffef\001\002\000\004\002\000\001\002\000" +
    "\030\034\035\037\026\042\040\046\027\054\012\057\022" +
    "\061\014\062\233\067\032\073\017\074\013\001\002\000" +
    "\032\014\100\021\070\033\071\037\073\075\107\076\077" +
    "\077\103\100\104\101\102\102\072\103\076\104\106\001" +
    "\002\000\030\034\uffda\037\uffda\042\uffda\046\uffda\054\uffda" +
    "\057\uffda\061\uffda\062\uffda\067\uffda\073\uffda\074\uffda\001" +
    "\002\000\054\007\uffdb\034\uffdb\037\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\051\uffdb\052\uffdb\054\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\064\uffdb\067\uffdb" +
    "\071\uffdb\073\uffdb\074\uffdb\001\002\000\004\041\uffee\001" +
    "\002\000\004\040\240\001\002\000\032\014\100\021\070" +
    "\033\071\037\073\075\107\076\077\077\103\100\104\101" +
    "\102\102\072\103\076\104\106\001\002\000\004\055\242" +
    "\001\002\000\032\014\100\021\070\033\071\037\073\075" +
    "\107\076\077\077\103\100\104\101\102\102\072\103\076" +
    "\104\106\001\002\000\006\047\246\106\245\001\002\000" +
    "\004\056\255\001\002\000\004\107\251\001\002\000\030" +
    "\034\uffdf\037\uffdf\042\uffdf\046\uffdf\054\uffdf\056\uffdf\057" +
    "\uffdf\061\uffdf\067\uffdf\073\uffdf\074\uffdf\001\002\000\030" +
    "\034\035\037\026\042\040\046\027\054\012\056\uffe2\057" +
    "\022\061\014\067\032\073\017\074\013\001\002\000\030" +
    "\034\uffe0\037\uffe0\042\uffe0\046\uffe0\054\uffe0\056\uffe0\057" +
    "\uffe0\061\uffe0\067\uffe0\073\uffe0\074\uffe0\001\002\000\032" +
    "\014\100\021\070\033\071\037\073\075\107\076\077\077" +
    "\103\100\104\101\102\102\072\103\076\104\106\001\002" +
    "\000\004\047\253\001\002\000\030\034\uffdf\037\uffdf\042" +
    "\uffdf\046\uffdf\054\uffdf\056\uffdf\057\uffdf\061\uffdf\067\uffdf" +
    "\073\uffdf\074\uffdf\001\002\000\030\034\035\037\026\042" +
    "\040\046\027\054\012\056\uffe1\057\022\061\014\067\032" +
    "\073\017\074\013\001\002\000\054\007\uffe3\034\uffe3\037" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\051\uffe3" +
    "\052\uffe3\054\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\064\uffe3\067\uffe3\071\uffe3\073\uffe3\074\uffe3\001\002" +
    "\000\030\034\uffd6\037\uffd6\042\uffd6\046\uffd6\054\uffd6\057" +
    "\uffd6\061\uffd6\065\260\067\uffd6\073\uffd6\074\uffd6\001\002" +
    "\000\026\034\035\037\026\042\040\046\027\054\012\057" +
    "\022\061\014\067\032\073\017\074\013\001\002\000\004" +
    "\021\261\001\002\000\006\022\uffd4\037\264\001\002\000" +
    "\006\005\267\022\uffd5\001\002\000\004\022\266\001\002" +
    "\000\012\010\051\011\050\012\045\013\046\001\002\000" +
    "\006\005\uffd2\022\uffd2\001\002\000\026\034\uffd7\037\uffd7" +
    "\042\uffd7\046\uffd7\054\uffd7\057\uffd7\061\uffd7\067\uffd7\073" +
    "\uffd7\074\uffd7\001\002\000\004\037\270\001\002\000\012" +
    "\010\051\011\050\012\045\013\046\001\002\000\006\005" +
    "\uffd3\022\uffd3\001\002\000\030\034\035\037\026\042\040" +
    "\046\027\054\012\057\022\061\014\067\032\071\273\073" +
    "\017\074\013\001\002\000\004\007\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\003\004\001\001\000\042\004\020\006" +
    "\041\010\017\013\036\016\027\017\024\020\035\023\022" +
    "\026\032\031\006\033\030\036\023\037\014\043\042\047" +
    "\010\053\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\100\007\073\012\236\015\074\001\001\000\012" +
    "\005\100\007\073\012\235\015\074\001\001\000\004\034" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\100\007\073\012\227\015\074\001\001\000\002\001" +
    "\001\000\030\006\066\010\017\013\036\016\027\017\024" +
    "\020\035\023\022\026\032\031\006\033\030\036\023\001" +
    "\001\000\012\005\100\007\073\012\221\015\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\100\007\073\012\203\015\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\100\007\073\012\201\015\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\100\007\073\012\104" +
    "\015\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\064\006\041\010\017" +
    "\013\036\016\027\017\024\020\035\023\022\026\032\031" +
    "\006\033\030\036\023\001\001\000\002\001\001\000\006" +
    "\044\054\045\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\063\001\001\000" +
    "\002\001\001\000\030\006\066\010\017\013\036\016\027" +
    "\017\024\020\035\023\022\026\032\031\006\033\030\036" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\100\007\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\100\007\112\001\001\000\004\014\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\136\006\041\010\017\013\036\016\027\017\024" +
    "\020\035\023\022\026\032\031\006\033\030\036\023\001" +
    "\001\000\032\006\066\010\017\013\036\016\027\017\024" +
    "\020\035\022\137\023\022\026\032\031\006\033\030\036" +
    "\023\001\001\000\004\021\140\001\001\000\002\001\001" +
    "\000\032\004\146\006\041\010\017\013\036\016\027\017" +
    "\024\020\035\023\022\026\032\031\006\033\030\036\023" +
    "\001\001\000\012\005\100\007\073\012\143\015\074\001" +
    "\001\000\002\001\001\000\032\004\145\006\041\010\017" +
    "\013\036\016\027\017\024\020\035\023\022\026\032\031" +
    "\006\033\030\036\023\001\001\000\030\006\066\010\017" +
    "\013\036\016\027\017\024\020\035\023\022\026\032\031" +
    "\006\033\030\036\023\001\001\000\030\006\066\010\017" +
    "\013\036\016\027\017\024\020\035\023\022\026\032\031" +
    "\006\033\030\036\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\100\007\073\012\155\015\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\162\001\001\000\002" +
    "\001\001\000\012\005\100\007\073\012\164\015\074\001" +
    "\001\000\002\001\001\000\004\052\167\001\001\000\006" +
    "\050\173\051\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\205\001\001\000\004\025\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\100\007\073\012\211\015" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\214\006\041\010\017\013\036\016\027\017\024\020" +
    "\035\023\022\026\032\031\006\033\030\036\023\001\001" +
    "\000\030\006\066\010\017\013\036\016\027\017\024\020" +
    "\035\023\022\026\032\031\006\033\030\036\023\001\001" +
    "\000\032\004\216\006\041\010\017\013\036\016\027\017" +
    "\024\020\035\023\022\026\032\031\006\033\030\036\023" +
    "\001\001\000\030\006\066\010\017\013\036\016\027\017" +
    "\024\020\035\023\022\026\032\031\006\033\030\036\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\223\001\001\000\030\006\225\010\017" +
    "\013\036\016\027\017\024\020\035\023\022\026\032\031" +
    "\006\033\030\036\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\233\010\017\013\036\016\027\017\024" +
    "\020\035\023\022\026\032\031\006\033\030\036\023\001" +
    "\001\000\012\005\100\007\073\012\234\015\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\100\007\073\012\240\015\074" +
    "\001\001\000\002\001\001\000\012\005\100\007\073\012" +
    "\242\015\074\001\001\000\004\027\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\246\001\001\000" +
    "\030\006\247\010\017\013\036\016\027\017\024\020\035" +
    "\023\022\026\032\031\006\033\030\036\023\001\001\000" +
    "\002\001\001\000\012\005\100\007\073\012\251\015\074" +
    "\001\001\000\002\001\001\000\004\030\253\001\001\000" +
    "\030\006\247\010\017\013\036\016\027\017\024\020\035" +
    "\023\022\026\032\031\006\033\030\036\023\001\001\000" +
    "\002\001\001\000\004\042\256\001\001\000\032\004\271" +
    "\006\041\010\017\013\036\016\027\017\024\020\035\023" +
    "\022\026\032\031\006\033\030\036\023\001\001\000\002" +
    "\001\001\000\006\040\261\041\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\270\001\001\000\002\001\001\000\030\006\066\010\017" +
    "\013\036\016\027\017\024\020\035\023\022\026\032\031" +
    "\006\033\030\036\023\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion start_val = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= prInicio S1 prFin 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S1 ::= INSTRUCCIONES 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S1",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S1 ::= METODOS 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S1",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S1 ::= FUNCION 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S1",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S1 ::= LLAMADA 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S1",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES ESTRUCTURA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 ((Estructura)a).agregarNombre(b); RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= ESTRUCTURA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Estructura(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA ::= DECLARACION punto_coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		System.out.println("a.imprimir()");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURA ::= ASIGNACION punto_coma 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA ::= IF 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA ::= IMPRESION punto_coma 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURA ::= SWITCH 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURA ::= CICLO_PARA 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURA ::= CICLO_MIENTRAS 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTRUCTURA ::= CICLO_REPETIR 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTRUCTURA ::= RETORNO punto_coma 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RETORNO ::= retornar EXPRESION 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPRESION ::= imprimir EXPRESION 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPRESION ::= imprimir_nl EXPRESION 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF ::= si EXPRESION entonces INSTRUCCIONES ELSE_IF ELSE fin_si 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELSE_IF ::= ELSE_IF o_si EXPRESION entonces INSTRUCCIONES 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELSE_IF ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELSE ::= de_lo_contrario INSTRUCCIONES 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELSE ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SWITCH ::= segun EXPRESION hacer SWITCH_CASE SWITCH_ELSE fin_segun 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SWITCH_CASE ::= SWITCH_CASE interrogacion_A EXPRESION interrogacion_B entonces INSTRUCCIONES 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SWITCH_CASE ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SWITCH_ELSE ::= de_lo_contrario entonces INSTRUCCIONES 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_ELSE",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SWITCH_ELSE ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_ELSE",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CICLO_PARA ::= para EXPRESION asignacion EXPRESION hasta EXPRESION CICLO_PARA_DEFINIDO fin_para 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CICLO_PARA_DEFINIDO ::= hacer SUB_CICLO_PARA_DEFINIDO 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA_DEFINIDO",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CICLO_PARA_DEFINIDO ::= con incremental EXPRESION hacer SUB_CICLO_PARA_DEFINIDO 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA_DEFINIDO",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SUB_CICLO_PARA_DEFINIDO ::= SUB_CICLO_PARA_DEFINIDO ESTRUCTURA 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_CICLO_PARA_DEFINIDO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SUB_CICLO_PARA_DEFINIDO ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_CICLO_PARA_DEFINIDO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CICLO_MIENTRAS ::= mientras EXPRESION hacer CICLO_MIENTRAS_DEFINIDO fin_mientras 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CICLO_MIENTRAS_DEFINIDO ::= CICLO_MIENTRAS_DEFINIDO ESTRUCTURA 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS_DEFINIDO",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CICLO_MIENTRAS_DEFINIDO ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS_DEFINIDO",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CICLO_REPETIR ::= repetir CICLO_REPETIR_DEFINIDO hasta_que EXPRESION 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CICLO_REPETIR_DEFINIDO ::= CICLO_REPETIR_DEFINIDO ESTRUCTURA 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR_DEFINIDO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CICLO_REPETIR_DEFINIDO ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR_DEFINIDO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODOS ::= metodo nombre_variable SUB3_METODOS INSTRUCCIONES fin_metodo 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SUB3_METODOS ::= con_parametros parentesis_A SUB2_METODOS parentesis_B 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_METODOS",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SUB3_METODOS ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_METODOS",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SUB2_METODOS ::= SUB_METODOS 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_METODOS",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SUB2_METODOS ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_METODOS",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SUB_METODOS ::= SUB_METODOS coma nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_METODOS",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SUB_METODOS ::= nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_METODOS",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCION ::= funcion nombre_variable TIPO_DE_DATO SUB3_FUNCION INSTRUCCIONES fin_funcion 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SUB3_FUNCION ::= con_parametros parentesis_A SUB2_FUNCION parentesis_B 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_FUNCION",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SUB3_FUNCION ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_FUNCION",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SUB2_FUNCION ::= SUB_FUNCION 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SUB2_FUNCION ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SUB_FUNCION ::= SUB_FUNCION coma nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SUB_FUNCION ::= nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LLAMADA ::= ejecutar nombre_variable SUB3_LLAMADA punto_coma 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SUB3_LLAMADA ::= parentesis_A SUB2_LLAMADA parentesis_B 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_LLAMADA",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SUB3_LLAMADA ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_LLAMADA",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SUB2_LLAMADA ::= SUB_LLAMADA 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_LLAMADA",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SUB2_LLAMADA ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_LLAMADA",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SUB_LLAMADA ::= SUB_LLAMADA coma nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_LLAMADA",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SUB_LLAMADA ::= nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_LLAMADA",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACION ::= NOMBRE_VARIABLES asignacion EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= prIngresar NOMBRE_VARIABLES prComo TIPO_DE_DATO prCon_valor EXPRESION 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Declaracion(a,b,c);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO_DE_DATO ::= prNumero 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO_DE_DATO ::= prCadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO_DE_DATO ::= prBoolean 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO_DE_DATO ::= prCaracter 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= OPERACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT= a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= String 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= Verdadero 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= Falso 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= Char 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= UNARIO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= not 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UNARIO ::= mas NUMERICO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Unario(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UNARIO ::= menos NUMERICO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Unario(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NUMERICO ::= num 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NUMERICO",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NUMERICO ::= Double 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NUMERICO",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NOMBRE_VARIABLES ::= NOMBRE_VARIABLES coma nombre_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 ((Lista_Nombres)a).agregarNombre(b); RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_VARIABLES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NOMBRE_VARIABLES ::= nombre_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Lista_Nombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_VARIABLES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACION ::= OPERACION OPERADORES VALORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new OperacionBinaria(a,c,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACION ::= VALORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORES ::= mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORES ::= menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORES ::= divicion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADORES ::= potencia 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADORES ::= mod 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADORES ::= multiplicacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADORES ::= mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADORES ::= menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERADORES ::= mayor_o_igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERADORES ::= menor_o_igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERADORES ::= es_igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADORES ::= es_diferente 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERADORES ::= or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERADORES ::= and 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERADORES ::= not 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALORES ::= num 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALORES ::= parentesis_A OPERACION parentesis_B 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALORES ::= corchete_A OPERACION corchete_B 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALORES ::= nombre_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALORES ::= Double 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
