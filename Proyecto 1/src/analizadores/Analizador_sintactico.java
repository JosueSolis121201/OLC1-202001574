
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import Instrucciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\003\005\000\002\054" +
    "\004\000\002\054\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\004\004\000" +
    "\002\004\003\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\006\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\004" +
    "\000\002\036\004\000\002\020\004\000\002\020\004\000" +
    "\002\017\011\000\002\022\007\000\002\022\002\000\002" +
    "\021\004\000\002\021\002\000\002\023\010\000\002\024" +
    "\010\000\002\024\002\000\002\025\005\000\002\025\002" +
    "\000\002\026\012\000\002\027\004\000\002\027\007\000" +
    "\002\030\004\000\002\030\002\000\002\031\007\000\002" +
    "\032\004\000\002\032\002\000\002\033\006\000\002\034" +
    "\004\000\002\034\002\000\002\037\007\000\002\042\006" +
    "\000\002\042\002\000\002\041\003\000\002\041\002\000" +
    "\002\040\006\000\002\040\004\000\002\043\010\000\002" +
    "\046\006\000\002\046\002\000\002\045\003\000\002\045" +
    "\002\000\002\044\006\000\002\044\004\000\002\047\006" +
    "\000\002\052\005\000\002\052\002\000\002\051\003\000" +
    "\002\051\002\000\002\050\006\000\002\050\004\000\002" +
    "\016\005\000\002\010\010\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\015\004\000\002\015\004\000\002\014\003\000\002\014" +
    "\003\000\002\013\005\000\002\013\003\000\002\007\005" +
    "\000\002\007\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\005\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\004\006\004\001\002\000\034\034\035\037" +
    "\025\042\040\046\026\054\012\057\021\061\014\063\041" +
    "\067\032\070\007\072\034\073\017\074\013\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\004" +
    "\037\260\001\002\000\062\007\ufff1\034\ufff1\037\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\051\ufff1\052\ufff1" +
    "\054\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1" +
    "\074\ufff1\001\002\000\036\007\ufffa\034\ufffa\037\ufffa\042" +
    "\ufffa\046\ufffa\054\ufffa\057\ufffa\061\ufffa\063\ufffa\067\ufffa" +
    "\070\ufffa\072\ufffa\073\ufffa\074\ufffa\001\002\000\032\014" +
    "\100\021\071\033\073\037\074\075\110\076\101\077\104" +
    "\100\105\101\103\102\072\103\077\104\106\001\002\000" +
    "\032\014\100\021\071\033\073\037\074\075\110\076\101" +
    "\077\104\100\105\101\103\102\072\103\077\104\106\001" +
    "\002\000\030\034\uffd7\037\uffd7\042\uffd7\046\uffd7\054\uffd7" +
    "\057\uffd7\061\uffd7\062\uffd7\067\uffd7\073\uffd7\074\uffd7\001" +
    "\002\000\036\007\ufffc\034\ufffc\037\ufffc\042\ufffc\046\ufffc" +
    "\054\ufffc\057\ufffc\061\ufffc\063\ufffc\067\ufffc\070\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\001\002\000\036\007\ufffe\034\ufffe" +
    "\037\ufffe\042\ufffe\046\ufffe\054\ufffe\057\ufffe\061\ufffe\063" +
    "\ufffe\067\ufffe\070\ufffe\072\ufffe\073\ufffe\074\ufffe\001\002" +
    "\000\032\014\100\021\071\033\073\037\074\075\110\076" +
    "\101\077\104\100\105\101\103\102\072\103\077\104\106" +
    "\001\002\000\004\041\232\001\002\000\032\014\100\021" +
    "\071\033\073\037\074\075\110\076\101\077\104\100\105" +
    "\101\103\102\072\103\077\104\106\001\002\000\062\007" +
    "\ufff3\034\ufff3\037\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\051\ufff3\052\ufff3\054\ufff3\056\ufff3\057\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\067\ufff3\070\ufff3" +
    "\071\ufff3\072\ufff3\073\ufff3\074\ufff3\001\002\000\004\041" +
    "\224\001\002\000\062\007\ufff5\034\ufff5\037\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\045\ufff5\046\ufff5\051\ufff5\052\ufff5\054" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\064\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074" +
    "\ufff5\001\002\000\010\005\uffaf\035\uffaf\040\uffaf\001\002" +
    "\000\032\014\100\021\071\033\073\037\074\075\110\076" +
    "\101\077\104\100\105\101\103\102\072\103\077\104\106" +
    "\001\002\000\004\041\206\001\002\000\036\007\205\034" +
    "\035\037\025\042\040\046\026\054\012\057\021\061\014" +
    "\063\041\067\032\070\007\072\034\073\017\074\013\001" +
    "\002\000\062\007\ufff0\034\ufff0\037\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\051\ufff0\052\ufff0\054\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\001" +
    "\002\000\032\014\100\021\071\033\073\037\074\075\110" +
    "\076\101\077\104\100\105\101\103\102\072\103\077\104" +
    "\106\001\002\000\062\007\ufff2\034\ufff2\037\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\051\ufff2\052\ufff2\054" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\064\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074" +
    "\ufff2\001\002\000\004\037\167\001\002\000\004\037\025" +
    "\001\002\000\004\041\161\001\002\000\006\005\155\040" +
    "\156\001\002\000\032\014\100\021\071\033\073\037\074" +
    "\075\110\076\101\077\104\100\105\101\103\102\072\103" +
    "\077\104\106\001\002\000\004\037\044\001\002\000\036" +
    "\007\ufffd\034\ufffd\037\ufffd\042\ufffd\046\ufffd\054\ufffd\057" +
    "\ufffd\061\ufffd\063\ufffd\067\ufffd\070\ufffd\072\ufffd\073\ufffd" +
    "\074\ufffd\001\002\000\036\007\ufffb\034\ufffb\037\ufffb\042" +
    "\ufffb\046\ufffb\054\ufffb\057\ufffb\061\ufffb\063\ufffb\067\ufffb" +
    "\070\ufffb\072\ufffb\073\ufffb\074\ufffb\001\002\000\012\010" +
    "\051\011\050\012\045\013\046\001\002\000\036\005\uffbd" +
    "\022\uffbd\034\uffbd\036\uffbd\037\uffbd\042\uffbd\046\uffbd\054" +
    "\uffbd\057\uffbd\061\uffbd\065\uffbd\067\uffbd\073\uffbd\074\uffbd" +
    "\001\002\000\036\005\uffbc\022\uffbc\034\uffbc\036\uffbc\037" +
    "\uffbc\042\uffbc\046\uffbc\054\uffbc\057\uffbc\061\uffbc\065\uffbc" +
    "\067\uffbc\073\uffbc\074\uffbc\001\002\000\030\034\uffcd\037" +
    "\uffcd\042\uffcd\046\uffcd\054\uffcd\057\uffcd\061\uffcd\065\053" +
    "\067\uffcd\073\uffcd\074\uffcd\001\002\000\036\005\uffbe\022" +
    "\uffbe\034\uffbe\036\uffbe\037\uffbe\042\uffbe\046\uffbe\054\uffbe" +
    "\057\uffbe\061\uffbe\065\uffbe\067\uffbe\073\uffbe\074\uffbe\001" +
    "\002\000\036\005\uffbf\022\uffbf\034\uffbf\036\uffbf\037\uffbf" +
    "\042\uffbf\046\uffbf\054\uffbf\057\uffbf\061\uffbf\065\uffbf\067" +
    "\uffbf\073\uffbf\074\uffbf\001\002\000\026\034\035\037\025" +
    "\042\040\046\026\054\012\057\021\061\014\067\032\073" +
    "\017\074\013\001\002\000\004\021\054\001\002\000\006" +
    "\022\uffcb\037\057\001\002\000\006\005\062\022\uffcc\001" +
    "\002\000\004\022\061\001\002\000\012\010\051\011\050" +
    "\012\045\013\046\001\002\000\006\005\uffc9\022\uffc9\001" +
    "\002\000\026\034\uffce\037\uffce\042\uffce\046\uffce\054\uffce" +
    "\057\uffce\061\uffce\067\uffce\073\uffce\074\uffce\001\002\000" +
    "\004\037\063\001\002\000\012\010\051\011\050\012\045" +
    "\013\046\001\002\000\006\005\uffca\022\uffca\001\002\000" +
    "\030\034\035\037\025\042\040\046\026\054\012\057\021" +
    "\061\014\064\067\067\032\073\017\074\013\001\002\000" +
    "\044\034\ufff8\037\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\051\ufff8\052\ufff8\054\ufff8\057\ufff8\061\ufff8\064" +
    "\ufff8\067\ufff8\071\ufff8\073\ufff8\074\ufff8\001\002\000\036" +
    "\007\uffcf\034\uffcf\037\uffcf\042\uffcf\046\uffcf\054\uffcf\057" +
    "\uffcf\061\uffcf\063\uffcf\067\uffcf\070\uffcf\072\uffcf\073\uffcf" +
    "\074\uffcf\001\002\000\044\034\ufff9\037\ufff9\042\ufff9\043" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\051\ufff9\052\ufff9\054\ufff9" +
    "\057\ufff9\061\ufff9\064\ufff9\067\ufff9\071\ufff9\073\ufff9\074" +
    "\ufff9\001\002\000\014\021\071\037\074\076\101\100\105" +
    "\104\106\001\002\000\100\007\uffb8\034\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074" +
    "\uffb8\106\uffb8\001\002\000\100\007\uffb5\034\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5" +
    "\074\uffb5\106\uffb5\001\002\000\142\007\uff9a\014\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\064\uff9a\067\uff9a\070\uff9a\071" +
    "\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\105\uff9a\106\uff9a" +
    "\001\002\000\136\007\uffbb\014\137\015\134\016\143\017" +
    "\130\020\142\023\147\024\140\025\141\026\131\027\133" +
    "\030\146\031\135\032\136\033\132\034\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb" +
    "\064\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\075\150\106\uffbb\001\002\000\100\007\uffb6\034\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
    "\uffb6\063\uffb6\064\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6" +
    "\073\uffb6\074\uffb6\106\uffb6\001\002\000\100\007\uffb7\034" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\067\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\106\uffb7\001\002\000\006\076\112" +
    "\100\111\001\002\000\142\007\uff9d\014\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\020\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\067\uff9d\070\uff9d\071\uff9d\072" +
    "\uff9d\073\uff9d\074\uff9d\075\uff9d\105\uff9d\106\uff9d\001\002" +
    "\000\142\007\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\105\uffad\106\uffad\001\002\000\100\007\uffb9" +
    "\034\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\067\uffb9\070\uffb9\071\uffb9" +
    "\072\uffb9\073\uffb9\074\uffb9\106\uffb9\001\002\000\100\007" +
    "\uffba\034\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\067\uffba\070\uffba\071" +
    "\uffba\072\uffba\073\uffba\074\uffba\106\uffba\001\002\000\142" +
    "\007\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\022" +
    "\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99" +
    "\031\uff99\032\uff99\033\uff99\034\uff99\037\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056" +
    "\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99" +
    "\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075" +
    "\uff99\105\uff99\106\uff99\001\002\000\014\021\071\037\074" +
    "\076\101\100\105\104\106\001\002\000\004\050\114\001" +
    "\002\000\006\076\112\100\111\001\002\000\100\007\uffb1" +
    "\034\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\106\uffb1\001\002\000\100\007" +
    "\uffb2\034\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\073\uffb2\074\uffb2\106\uffb2\001\002\000\100" +
    "\007\uffb4\034\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\106\uffb4\001\002\000" +
    "\026\034\035\037\025\042\040\046\026\054\012\057\021" +
    "\061\014\067\032\073\017\074\013\001\002\000\034\034" +
    "\035\037\025\042\040\043\uffe9\044\uffe9\045\uffe9\046\026" +
    "\054\012\057\021\061\014\067\032\073\017\074\013\001" +
    "\002\000\010\043\uffe7\044\120\045\121\001\002\000\004" +
    "\043\126\001\002\000\026\034\035\037\025\042\040\046" +
    "\026\054\012\057\021\061\014\067\032\073\017\074\013" +
    "\001\002\000\032\014\100\021\071\033\073\037\074\075" +
    "\110\076\101\077\104\100\105\101\103\102\072\103\077" +
    "\104\106\001\002\000\004\050\123\001\002\000\026\034" +
    "\035\037\025\042\040\046\026\054\012\057\021\061\014" +
    "\067\032\073\017\074\013\001\002\000\034\034\035\037" +
    "\025\042\040\043\uffea\044\uffea\045\uffea\046\026\054\012" +
    "\057\021\061\014\067\032\073\017\074\013\001\002\000" +
    "\030\034\035\037\025\042\040\043\uffe8\046\026\054\012" +
    "\057\021\061\014\067\032\073\017\074\013\001\002\000" +
    "\062\007\uffeb\034\uffeb\037\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\051\uffeb\052\uffeb\054\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\001\002\000" +
    "\042\014\137\015\134\016\143\017\130\020\142\023\147" +
    "\024\140\025\141\026\131\027\133\030\146\031\135\032" +
    "\136\033\132\075\150\105\145\001\002\000\014\021\uffa9" +
    "\037\uffa9\076\uffa9\100\uffa9\104\uffa9\001\002\000\014\021" +
    "\uffa3\037\uffa3\076\uffa3\100\uffa3\104\uffa3\001\002\000\014" +
    "\021\uff9e\037\uff9e\076\uff9e\100\uff9e\104\uff9e\001\002\000" +
    "\014\021\uffa2\037\uffa2\076\uffa2\100\uffa2\104\uffa2\001\002" +
    "\000\014\021\uffa7\037\uffa7\076\uffa7\100\uffa7\104\uffa7\001" +
    "\002\000\014\021\uffa0\037\uffa0\076\uffa0\100\uffa0\104\uffa0" +
    "\001\002\000\014\021\uff9f\037\uff9f\076\uff9f\100\uff9f\104" +
    "\uff9f\001\002\000\014\021\uffab\037\uffab\076\uffab\100\uffab" +
    "\104\uffab\001\002\000\014\021\uffa5\037\uffa5\076\uffa5\100" +
    "\uffa5\104\uffa5\001\002\000\014\021\uffa4\037\uffa4\076\uffa4" +
    "\100\uffa4\104\uffa4\001\002\000\014\021\uffa8\037\uffa8\076" +
    "\uffa8\100\uffa8\104\uffa8\001\002\000\014\021\uffaa\037\uffaa" +
    "\076\uffaa\100\uffaa\104\uffaa\001\002\000\014\021\071\037" +
    "\074\076\101\100\105\104\106\001\002\000\142\007\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057" +
    "\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\067\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\105" +
    "\uff9b\106\uff9b\001\002\000\014\021\uffa1\037\uffa1\076\uffa1" +
    "\100\uffa1\104\uffa1\001\002\000\014\021\uffa6\037\uffa6\076" +
    "\uffa6\100\uffa6\104\uffa6\001\002\000\014\021\uffac\037\uffac" +
    "\076\uffac\100\uffac\104\uffac\001\002\000\142\007\uffae\014" +
    "\uffae\015\uffae\016\uffae\017\uffae\020\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\067\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\105\uffae" +
    "\106\uffae\001\002\000\100\007\uffb3\034\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\064\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074" +
    "\uffb3\106\uffb3\001\002\000\042\014\137\015\134\016\143" +
    "\017\130\020\142\022\154\023\147\024\140\025\141\026" +
    "\131\027\133\030\146\031\135\032\136\033\132\075\150" +
    "\001\002\000\142\007\uff9c\014\uff9c\015\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073" +
    "\uff9c\074\uff9c\075\uff9c\105\uff9c\106\uff9c\001\002\000\004" +
    "\037\160\001\002\000\032\014\100\021\071\033\073\037" +
    "\074\075\110\076\101\077\104\100\105\101\103\102\072" +
    "\103\077\104\106\001\002\000\004\041\uffc1\001\002\000" +
    "\010\005\uffb0\035\uffb0\040\uffb0\001\002\000\062\007\ufff4" +
    "\034\ufff4\037\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046" +
    "\ufff4\051\ufff4\052\ufff4\054\ufff4\056\ufff4\057\ufff4\060\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\064\ufff4\067\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\001\002\000\006\005\155" +
    "\035\163\001\002\000\012\010\051\011\050\012\045\013" +
    "\046\001\002\000\004\036\165\001\002\000\032\014\100" +
    "\021\071\033\073\037\074\075\110\076\101\077\104\100" +
    "\105\101\103\102\072\103\077\104\106\001\002\000\004" +
    "\041\uffc0\001\002\000\006\021\170\041\uffc6\001\002\000" +
    "\006\022\uffc4\037\175\001\002\000\004\041\172\001\002" +
    "\000\036\007\uffc8\034\uffc8\037\uffc8\042\uffc8\046\uffc8\054" +
    "\uffc8\057\uffc8\061\uffc8\063\uffc8\067\uffc8\070\uffc8\072\uffc8" +
    "\073\uffc8\074\uffc8\001\002\000\004\022\202\001\002\000" +
    "\006\005\177\022\uffc5\001\002\000\012\010\051\011\050" +
    "\012\045\013\046\001\002\000\006\005\uffc2\022\uffc2\001" +
    "\002\000\004\037\200\001\002\000\012\010\051\011\050" +
    "\012\045\013\046\001\002\000\006\005\uffc3\022\uffc3\001" +
    "\002\000\004\041\uffc7\001\002\000\004\041\uffee\001\002" +
    "\000\036\007\uffff\034\uffff\037\uffff\042\uffff\046\uffff\054" +
    "\uffff\057\uffff\061\uffff\063\uffff\067\uffff\070\uffff\072\uffff" +
    "\073\uffff\074\uffff\001\002\000\004\002\000\001\002\000" +
    "\062\007\ufff6\034\ufff6\037\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\051\ufff6\052\ufff6\054\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\067\ufff6" +
    "\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\001\002\000" +
    "\004\047\210\001\002\000\010\044\uffe4\051\uffe4\052\uffe4" +
    "\001\002\000\010\044\213\051\uffe2\052\214\001\002\000" +
    "\004\051\223\001\002\000\004\050\221\001\002\000\032" +
    "\014\100\021\071\033\073\037\074\075\110\076\101\077" +
    "\104\100\105\101\103\102\072\103\077\104\106\001\002" +
    "\000\004\053\216\001\002\000\004\050\217\001\002\000" +
    "\026\034\035\037\025\042\040\046\026\054\012\057\021" +
    "\061\014\067\032\073\017\074\013\001\002\000\034\034" +
    "\035\037\025\042\040\044\uffe5\046\026\051\uffe5\052\uffe5" +
    "\054\012\057\021\061\014\067\032\073\017\074\013\001" +
    "\002\000\026\034\035\037\025\042\040\046\026\054\012" +
    "\057\021\061\014\067\032\073\017\074\013\001\002\000" +
    "\030\034\035\037\025\042\040\046\026\051\uffe3\054\012" +
    "\057\021\061\014\067\032\073\017\074\013\001\002\000" +
    "\062\007\uffe6\034\uffe6\037\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\051\uffe6\052\uffe6\054\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\001\002\000" +
    "\062\007\uffef\034\uffef\037\uffef\042\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\051\uffef\052\uffef\054\uffef\056\uffef\057" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\067\uffef" +
    "\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\001\002\000" +
    "\004\047\226\001\002\000\030\034\uffda\037\uffda\042\uffda" +
    "\046\uffda\054\uffda\057\uffda\060\uffda\061\uffda\067\uffda\073" +
    "\uffda\074\uffda\001\002\000\030\034\035\037\025\042\040" +
    "\046\026\054\012\057\021\060\230\061\014\067\032\073" +
    "\017\074\013\001\002\000\062\007\uffdc\034\uffdc\037\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\051\uffdc\052" +
    "\uffdc\054\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073" +
    "\uffdc\074\uffdc\001\002\000\030\034\uffdb\037\uffdb\042\uffdb" +
    "\046\uffdb\054\uffdb\057\uffdb\060\uffdb\061\uffdb\067\uffdb\073" +
    "\uffdb\074\uffdb\001\002\000\062\007\ufff7\034\ufff7\037\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\051\ufff7\052" +
    "\ufff7\054\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\001\002\000\004\041\uffed\001\002\000\030" +
    "\034\035\037\025\042\040\046\026\054\012\057\021\061" +
    "\014\062\235\067\032\073\017\074\013\001\002\000\032" +
    "\014\100\021\071\033\073\037\074\075\110\076\101\077" +
    "\104\100\105\101\103\102\072\103\077\104\106\001\002" +
    "\000\030\034\uffd8\037\uffd8\042\uffd8\046\uffd8\054\uffd8\057" +
    "\uffd8\061\uffd8\062\uffd8\067\uffd8\073\uffd8\074\uffd8\001\002" +
    "\000\062\007\uffd9\034\uffd9\037\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\051\uffd9\052\uffd9\054\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\067" +
    "\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\001\002" +
    "\000\004\041\uffec\001\002\000\004\040\242\001\002\000" +
    "\032\014\100\021\071\033\073\037\074\075\110\076\101" +
    "\077\104\100\105\101\103\102\072\103\077\104\106\001" +
    "\002\000\004\055\244\001\002\000\032\014\100\021\071" +
    "\033\073\037\074\075\110\076\101\077\104\100\105\101" +
    "\103\102\072\103\077\104\106\001\002\000\006\047\250" +
    "\106\247\001\002\000\004\056\257\001\002\000\004\107" +
    "\253\001\002\000\030\034\uffdd\037\uffdd\042\uffdd\046\uffdd" +
    "\054\uffdd\056\uffdd\057\uffdd\061\uffdd\067\uffdd\073\uffdd\074" +
    "\uffdd\001\002\000\030\034\035\037\025\042\040\046\026" +
    "\054\012\056\uffe0\057\021\061\014\067\032\073\017\074" +
    "\013\001\002\000\030\034\uffde\037\uffde\042\uffde\046\uffde" +
    "\054\uffde\056\uffde\057\uffde\061\uffde\067\uffde\073\uffde\074" +
    "\uffde\001\002\000\032\014\100\021\071\033\073\037\074" +
    "\075\110\076\101\077\104\100\105\101\103\102\072\103" +
    "\077\104\106\001\002\000\004\047\255\001\002\000\030" +
    "\034\uffdd\037\uffdd\042\uffdd\046\uffdd\054\uffdd\056\uffdd\057" +
    "\uffdd\061\uffdd\067\uffdd\073\uffdd\074\uffdd\001\002\000\030" +
    "\034\035\037\025\042\040\046\026\054\012\056\uffdf\057" +
    "\021\061\014\067\032\073\017\074\013\001\002\000\062" +
    "\007\uffe1\034\uffe1\037\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\051\uffe1\052\uffe1\054\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\067\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\001\002\000\030" +
    "\034\uffd4\037\uffd4\042\uffd4\046\uffd4\054\uffd4\057\uffd4\061" +
    "\uffd4\065\262\067\uffd4\073\uffd4\074\uffd4\001\002\000\026" +
    "\034\035\037\025\042\040\046\026\054\012\057\021\061" +
    "\014\067\032\073\017\074\013\001\002\000\004\021\263" +
    "\001\002\000\006\022\uffd2\037\266\001\002\000\006\005" +
    "\271\022\uffd3\001\002\000\004\022\270\001\002\000\012" +
    "\010\051\011\050\012\045\013\046\001\002\000\006\005" +
    "\uffd0\022\uffd0\001\002\000\026\034\uffd5\037\uffd5\042\uffd5" +
    "\046\uffd5\054\uffd5\057\uffd5\061\uffd5\067\uffd5\073\uffd5\074" +
    "\uffd5\001\002\000\004\037\272\001\002\000\012\010\051" +
    "\011\050\012\045\013\046\001\002\000\006\005\uffd1\022" +
    "\uffd1\001\002\000\030\034\035\037\025\042\040\046\026" +
    "\054\012\057\021\061\014\067\032\071\275\073\017\074" +
    "\013\001\002\000\036\007\uffd6\034\uffd6\037\uffd6\042\uffd6" +
    "\046\uffd6\054\uffd6\057\uffd6\061\uffd6\063\uffd6\067\uffd6\070" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\004\003\004\001\001\000\042\006\041\010" +
    "\017\013\036\016\026\017\023\020\035\023\021\026\032" +
    "\031\007\033\030\036\022\037\014\043\042\047\010\053" +
    "\015\054\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\101\007\074\012\240\015\075\001\001\000\012" +
    "\005\101\007\074\012\237\015\075\001\001\000\004\034" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\101\007\074\012\232\015\075\001\001\000\002\001" +
    "\001\000\012\005\101\007\074\012\224\015\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\101\007\074\012\206\015\075" +
    "\001\001\000\002\001\001\000\040\006\041\010\017\013" +
    "\036\016\026\017\023\020\035\023\021\026\032\031\007" +
    "\033\030\036\022\037\014\043\042\047\010\053\203\001" +
    "\001\000\002\001\001\000\012\005\101\007\074\012\202" +
    "\015\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\101\007\074\012\106\015\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\064\006\065\010\017\013\036\016\026\017" +
    "\023\020\035\023\021\026\032\031\007\033\030\036\022" +
    "\001\001\000\002\001\001\000\006\044\054\045\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\063\001\001\000\002\001\001\000\030" +
    "\006\067\010\017\013\036\016\026\017\023\020\035\023" +
    "\021\026\032\031\007\033\030\036\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\101\007\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\101\007\126\001\001" +
    "\000\002\001\001\000\004\014\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\114" +
    "\006\065\010\017\013\036\016\026\017\023\020\035\023" +
    "\021\026\032\031\007\033\030\036\022\001\001\000\032" +
    "\006\067\010\017\013\036\016\026\017\023\020\035\022" +
    "\115\023\021\026\032\031\007\033\030\036\022\001\001" +
    "\000\004\021\116\001\001\000\002\001\001\000\032\004" +
    "\124\006\065\010\017\013\036\016\026\017\023\020\035" +
    "\023\021\026\032\031\007\033\030\036\022\001\001\000" +
    "\012\005\101\007\074\012\121\015\075\001\001\000\002" +
    "\001\001\000\032\004\123\006\065\010\017\013\036\016" +
    "\026\017\023\020\035\023\021\026\032\031\007\033\030" +
    "\036\022\001\001\000\030\006\067\010\017\013\036\016" +
    "\026\017\023\020\035\023\021\026\032\031\007\033\030" +
    "\036\022\001\001\000\030\006\067\010\017\013\036\016" +
    "\026\017\023\020\035\023\021\026\032\031\007\033\030" +
    "\036\022\001\001\000\002\001\001\000\004\002\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\101\007\074\012\156\015\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\163\001\001\000\002\001" +
    "\001\000\012\005\101\007\074\012\165\015\075\001\001" +
    "\000\002\001\001\000\004\052\170\001\001\000\006\050" +
    "\173\051\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\210\001\001\000\004\025" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\101\007\074\012\214\015\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\217\006\065\010\017" +
    "\013\036\016\026\017\023\020\035\023\021\026\032\031" +
    "\007\033\030\036\022\001\001\000\030\006\067\010\017" +
    "\013\036\016\026\017\023\020\035\023\021\026\032\031" +
    "\007\033\030\036\022\001\001\000\032\004\221\006\065" +
    "\010\017\013\036\016\026\017\023\020\035\023\021\026" +
    "\032\031\007\033\030\036\022\001\001\000\030\006\067" +
    "\010\017\013\036\016\026\017\023\020\035\023\021\026" +
    "\032\031\007\033\030\036\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\226\001" +
    "\001\000\030\006\230\010\017\013\036\016\026\017\023" +
    "\020\035\023\021\026\032\031\007\033\030\036\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\235\010\017\013\036\016" +
    "\026\017\023\020\035\023\021\026\032\031\007\033\030" +
    "\036\022\001\001\000\012\005\101\007\074\012\236\015" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\101\007\074\012" +
    "\242\015\075\001\001\000\002\001\001\000\012\005\101" +
    "\007\074\012\244\015\075\001\001\000\004\027\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\250" +
    "\001\001\000\030\006\251\010\017\013\036\016\026\017" +
    "\023\020\035\023\021\026\032\031\007\033\030\036\022" +
    "\001\001\000\002\001\001\000\012\005\101\007\074\012" +
    "\253\015\075\001\001\000\002\001\001\000\004\030\255" +
    "\001\001\000\030\006\251\010\017\013\036\016\026\017" +
    "\023\020\035\023\021\026\032\031\007\033\030\036\022" +
    "\001\001\000\002\001\001\000\004\042\260\001\001\000" +
    "\032\004\273\006\065\010\017\013\036\016\026\017\023" +
    "\020\035\023\021\026\032\031\007\033\030\036\022\001" +
    "\001\000\002\001\001\000\006\040\263\041\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\272\001\001\000\002\001\001\000\030\006" +
    "\067\010\017\013\036\016\026\017\023\020\035\023\021" +
    "\026\032\031\007\033\030\036\022\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion start_val = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= prInicio S0P prFin 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 System.out.println(a.imprimir());
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S0P ::= S0P S1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 ((S1)a).agregar(b); RESULT=a;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S0P",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S0P ::= S1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new S1(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S0P",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S1 ::= ESTRUCTURA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S1",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S1 ::= METODOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S1",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S1 ::= FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S1",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S1 ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("S1",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES ESTRUCTURA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 ((Lista_Estructura)a).agregarNombre(b); RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= ESTRUCTURA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=new Lista_Estructura(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA ::= DECLARACION punto_coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA ::= ASIGNACION punto_coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURA ::= IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURA ::= IMPRESION punto_coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURA ::= SWITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTRUCTURA ::= CICLO_PARA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTRUCTURA ::= CICLO_MIENTRAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTRUCTURA ::= CICLO_REPETIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESTRUCTURA ::= RETORNO punto_coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RETORNO ::= retornar EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=new Retornar(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IMPRESION ::= imprimir EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Impresion(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IMPRESION ::= imprimir_nl EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Impresion(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= si EXPRESION entonces INSTRUCCIONES ELSE_IF ELSE fin_si 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  RESULT=new IF(a,b,c,d);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELSE_IF ::= ELSE_IF o_si EXPRESION entonces INSTRUCCIONES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Instruccion nueva = new Else_If(b,c,d); ((Lista_If)a).agregarNombre(nueva); RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELSE_IF ::= 
            {
              Instruccion RESULT =null;
		RESULT= new Lista_If();
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSE ::= de_lo_contrario INSTRUCCIONES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Else(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSE ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SWITCH ::= segun EXPRESION hacer SWITCH_CASE SWITCH_ELSE fin_segun 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  RESULT=new Switch(a,b,c);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SWITCH_CASE ::= SWITCH_CASE interrogacion_A EXPRESION interrogacion_B entonces INSTRUCCIONES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Instruccion nueva = new Switch_Case(b,c,d); ((Lista_Switch)a).agregarNombre(nueva); RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SWITCH_CASE ::= 
            {
              Instruccion RESULT =null;
		RESULT= new Lista_Switch();
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SWITCH_ELSE ::= de_lo_contrario entonces INSTRUCCIONES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Switch_f(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_ELSE",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SWITCH_ELSE ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_ELSE",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CICLO_PARA ::= para EXPRESION asignacion EXPRESION hasta EXPRESION CICLO_PARA_DEFINIDO fin_para 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  RESULT=new Para(a,b,c,d);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CICLO_PARA_DEFINIDO ::= hacer SUB_CICLO_PARA_DEFINIDO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA_DEFINIDO",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CICLO_PARA_DEFINIDO ::= con incremental EXPRESION hacer SUB_CICLO_PARA_DEFINIDO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=new Para_F(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_PARA_DEFINIDO",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SUB_CICLO_PARA_DEFINIDO ::= SUB_CICLO_PARA_DEFINIDO ESTRUCTURA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=new Para_F(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_CICLO_PARA_DEFINIDO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SUB_CICLO_PARA_DEFINIDO ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_CICLO_PARA_DEFINIDO",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CICLO_MIENTRAS ::= mientras EXPRESION hacer CICLO_MIENTRAS_DEFINIDO fin_mientras 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  RESULT=new Mientras(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CICLO_MIENTRAS_DEFINIDO ::= CICLO_MIENTRAS_DEFINIDO ESTRUCTURA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=new Mientras_Definido(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS_DEFINIDO",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CICLO_MIENTRAS_DEFINIDO ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_MIENTRAS_DEFINIDO",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CICLO_REPETIR ::= repetir CICLO_REPETIR_DEFINIDO hasta_que EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=new Repetir(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CICLO_REPETIR_DEFINIDO ::= CICLO_REPETIR_DEFINIDO ESTRUCTURA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=new Repetir_Definido(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR_DEFINIDO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CICLO_REPETIR_DEFINIDO ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_REPETIR_DEFINIDO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METODOS ::= metodo nombre_variable SUB3_METODOS INSTRUCCIONES fin_metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=new Metodo(a,b,c);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SUB3_METODOS ::= con_parametros parentesis_A SUB2_METODOS parentesis_B 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_METODOS",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SUB3_METODOS ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_METODOS",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SUB2_METODOS ::= SUB_METODOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_METODOS",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SUB2_METODOS ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_METODOS",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SUB_METODOS ::= SUB_METODOS coma nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Instruccion nueva = new Variable(b,c); ((Lista_Variables)a).agregarNombre(nueva); RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_METODOS",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SUB_METODOS ::= nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		Instruccion nueva = new Variable(a,b); RESULT= new Lista_Variables(nueva);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_METODOS",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= funcion nombre_variable TIPO_DE_DATO SUB3_FUNCION INSTRUCCIONES fin_funcion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=new Funcion(a,b,c,d);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SUB3_FUNCION ::= con_parametros parentesis_A SUB2_FUNCION parentesis_B 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_FUNCION",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SUB3_FUNCION ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_FUNCION",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SUB2_FUNCION ::= SUB_FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SUB2_FUNCION ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_FUNCION",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SUB_FUNCION ::= SUB_FUNCION coma nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Instruccion nueva = new Variable(b,c); ((Lista_Variables)a).agregarNombre(nueva); RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SUB_FUNCION ::= nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		Instruccion nueva = new Variable(a,b); RESULT= new Lista_Variables(nueva);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_FUNCION",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LLAMADA ::= ejecutar nombre_variable SUB3_LLAMADA punto_coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=new Llamada(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SUB3_LLAMADA ::= parentesis_A SUB2_LLAMADA parentesis_B 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_LLAMADA",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SUB3_LLAMADA ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB3_LLAMADA",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SUB2_LLAMADA ::= SUB_LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_LLAMADA",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SUB2_LLAMADA ::= 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB2_LLAMADA",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SUB_LLAMADA ::= SUB_LLAMADA coma nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 Instruccion nueva = new Variable(b,c); ((Lista_Variables)a).agregarNombre(nueva); RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_LLAMADA",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SUB_LLAMADA ::= nombre_variable TIPO_DE_DATO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		Instruccion nueva = new Variable(a,b); RESULT= new Lista_Variables(nueva);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SUB_LLAMADA",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACION ::= NOMBRE_VARIABLES asignacion EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Asignacion(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= prIngresar NOMBRE_VARIABLES prComo TIPO_DE_DATO prCon_valor EXPRESION 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Declaracion(a,b,c);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO_DE_DATO ::= prNumero 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO_DE_DATO ::= prCadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO_DE_DATO ::= prBoolean 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO_DE_DATO ::= prCaracter 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DE_DATO",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= OPERACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT= a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= String 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= Verdadero 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= Falso 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= Char 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= UNARIO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= not 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // UNARIO ::= mas NUMERICO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Unario(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // UNARIO ::= menos NUMERICO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Unario(a,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NUMERICO ::= num 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NUMERICO",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NUMERICO ::= Double 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NUMERICO",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NOMBRE_VARIABLES ::= NOMBRE_VARIABLES coma nombre_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 ((Lista_Nombres)a).agregarNombre(b); RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_VARIABLES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NOMBRE_VARIABLES ::= nombre_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Lista_Nombres(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_VARIABLES",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERACION ::= OPERACION OPERADORES VALORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new OperacionBinaria(a,c,b);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERACION ::= VALORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORES ::= mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADORES ::= menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADORES ::= divicion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADORES ::= potencia 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADORES ::= mod 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPERADORES ::= multiplicacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPERADORES ::= mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPERADORES ::= menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERADORES ::= mayor_o_igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADORES ::= menor_o_igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERADORES ::= es_igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERADORES ::= es_diferente 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERADORES ::= or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERADORES ::= and 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERADORES ::= not 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALORES ::= num 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALORES ::= parentesis_A OPERACION parentesis_B 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALORES ::= corchete_A OPERACION corchete_B 
            {
              Instruccion RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALORES ::= nombre_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALORES ::= Double 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=new Valor(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
