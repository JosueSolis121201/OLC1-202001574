/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,37],$V1=[1,43],$V2=[1,42],$V3=[1,41],$V4=[1,40],$V5=[1,33],$V6=[1,34],$V7=[1,39],$V8=[1,36],$V9=[1,38],$Va=[1,32],$Vb=[1,35],$Vc=[1,44],$Vd=[1,45],$Ve=[1,46],$Vf=[1,47],$Vg=[1,48],$Vh=[6,53,58,76,77,78,81,82,83,85,86,87,92,121,122,123,124,125],$Vi=[6,41,53,54,58,73,74,76,77,78,81,82,83,85,86,87,92,95,96,98,116,117,118,119,120,121,122,123,124,125],$Vj=[1,53],$Vk=[1,56],$Vl=[2,135],$Vm=[1,76],$Vn=[1,96],$Vo=[1,95],$Vp=[1,87],$Vq=[1,94],$Vr=[1,93],$Vs=[1,92],$Vt=[1,91],$Vu=[1,90],$Vv=[1,89],$Vw=[1,88],$Vx=[1,100],$Vy=[1,99],$Vz=[1,97],$VA=[1,98],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[53,56,73,98],$VF=[56,69],$VG=[1,123],$VH=[1,124],$VI=[52,56,57,99],$VJ=[1,136],$VK=[1,149],$VL=[1,135],$VM=[1,137],$VN=[1,138],$VO=[1,139],$VP=[1,140],$VQ=[1,141],$VR=[1,142],$VS=[1,143],$VT=[1,144],$VU=[1,145],$VV=[1,146],$VW=[1,147],$VX=[1,148],$VY=[40,51,52,56,57,74,79,80,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115],$VZ=[2,121],$V_=[40,51,52,56,57,69,74,79,80,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115],$V$=[1,177],$V01=[56,69,74],$V11=[53,58,74,76,77,78,81,82,83,85,86,87,92,95,96,121,122,123,124,125],$V21=[41,53,54,73,98,116,117,118,119,120],$V31=[74,95,96],$V41=[6,41,53,54,58,73,74,76,77,78,81,82,83,85,86,87,90,91,92,95,96,98,116,117,118,119,120,121,122,123,124,125];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S0":3,"inicio":4,"S0P":5,"fin":6,"EOF":7,"S1":8,"ESTRUCTURA":9,"INSTRUCCIONES":10,"DECLARACION":11,"ASIGNACION":12,"D_VECTORES":13,"DL_VECTORES":14,"MODIFICAR_VEC":15,"IF":16,"PRINT":17,"PRINTLN":18,"SWITCH":19,"WHILE":20,"INCREMENTO_MINI":21,"DECREMENTO_MINI":22,"FOR":23,"DO_WHILE":24,"DO_ULTIL":25,"BREAK":26,"CONTINUE":27,"RETURN":28,"FUNCION":29,"METODO":30,"PUSH":31,"POP":32,"RUN":33,"LLAMADA":34,"EXPRESION":35,"OPERACION":36,"CASTEO":37,"INCREMENTOS":38,"DECREMENTOS":39,"menos":40,"numero":41,"LOWER":42,"UPPER":43,"ROUND":44,"LENGTH":45,"TYPEOF":46,"TOSTRING":47,"TOCHARARRAY":48,"LLAMADA_MINI":49,"TERNARIO":50,"interrogacion":51,"dos_puntos":52,"identificador":53,"parentesis_A":54,"LISTA_VALORES":55,"parentesis_B":56,"punto_coma":57,"run":58,"punto":59,"pop":60,"push":61,"toCharArray":62,"tostring":63,"typeof":64,"length":65,"round":66,"toUpper":67,"toLower":68,"coma":69,"VALORES":70,"PARAMETROS":71,"void":72,"llave_A":73,"llave_B":74,"TIPO":75,"return":76,"continue":77,"break":78,"incremento":79,"decremento":80,"print":81,"println":82,"do":83,"until":84,"while":85,"for":86,"if":87,"ELSE_IF":88,"ELSE":89,"else":90,"elif":91,"switch":92,"CASE":93,"DEFAULT":94,"default":95,"case":96,"IDENTIFICADORES":97,"corchete_A":98,"corchete_B":99,"igualacion":100,"new":101,"OPERADORES":102,"mas":103,"por":104,"division":105,"potencia":106,"porcentaje":107,"mayor_igual":108,"menor_igual":109,"mayor_que":110,"menor_que":111,"igual":112,"diferente":113,"or":114,"and":115,"decimal":116,"string":117,"true":118,"false":119,"char":120,"prchar":121,"int":122,"double":123,"prstring":124,"boolean":125,"$accept":0,"$end":1},
terminals_: {2:"error",4:"inicio",6:"fin",7:"EOF",40:"menos",41:"numero",51:"interrogacion",52:"dos_puntos",53:"identificador",54:"parentesis_A",56:"parentesis_B",57:"punto_coma",58:"run",59:"punto",60:"pop",61:"push",62:"toCharArray",63:"tostring",64:"typeof",65:"length",66:"round",67:"toUpper",68:"toLower",69:"coma",72:"void",73:"llave_A",74:"llave_B",76:"return",77:"continue",78:"break",79:"incremento",80:"decremento",81:"print",82:"println",83:"do",84:"until",85:"while",86:"for",87:"if",90:"else",91:"elif",92:"switch",95:"default",96:"case",98:"corchete_A",99:"corchete_B",100:"igualacion",101:"new",103:"mas",104:"por",105:"division",106:"potencia",107:"porcentaje",108:"mayor_igual",109:"menor_igual",110:"mayor_que",111:"menor_que",112:"igual",113:"diferente",114:"or",115:"and",116:"decimal",117:"string",118:"true",119:"false",120:"char",121:"prchar",122:"int",123:"double",124:"prstring",125:"boolean"},
productions_: [0,[3,4],[5,2],[5,1],[8,1],[10,2],[10,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[35,1],[35,1],[35,1],[35,1],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[50,5],[49,4],[49,3],[34,5],[33,5],[33,6],[32,6],[31,7],[48,4],[47,4],[46,4],[45,4],[44,4],[43,4],[42,4],[55,3],[55,1],[30,9],[30,7],[29,9],[71,4],[71,2],[71,0],[28,2],[28,3],[27,2],[26,2],[21,3],[22,3],[17,5],[18,5],[25,9],[24,9],[23,10],[16,9],[89,4],[89,0],[88,8],[88,0],[19,8],[94,3],[94,0],[93,5],[93,0],[20,7],[15,7],[15,10],[11,3],[11,5],[14,9],[14,17],[13,11],[13,16],[12,4],[37,4],[38,2],[39,2],[36,3],[36,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[70,1],[70,1],[70,1],[70,1],[70,3],[70,3],[70,3],[70,1],[70,1],[70,1],[75,1],[75,1],[75,1],[75,1],[75,1],[97,3],[97,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("TERMINE DE ANALIZAR EL PROYECTO C:");
break;
case 45:
console.error("---------TERNARIO");
break;
case 48:
console.error("---------LLAMADA");
break;
case 49: case 50:
console.error("---------RUN");
break;
case 62:
console.error("---------METODO VOID");
break;
case 63:
console.error("---------METODO");
break;
case 64:
console.error("---------FUNCION");
break;
case 76:
console.error("---------DO_UNTIL");
break;
case 77:
console.error("---------DO_WHILE");
break;
case 78:
console.error("---------FOR");
break;
case 79:
console.error("---------IF");
break;
case 80:
console.error("---------ELSE");
break;
case 82:
console.error("---------ELIF");
break;
case 84:
console.error("---------SWITCH");
break;
case 85:
console.error("---------DEFAULT");
break;
case 87:
console.error("---------CASE");
break;
case 89:
console.error("---------WHILE");
break;
case 90:
console.error("--------------MODFICAR VEC");
break;
case 91:
console.error("--------------MODFICAR VEC 2");
break;
case 92: case 93:
console.error("Declaracion");
break;
case 94:
console.error("---------VECTOR DECLARACION 1 lista--------");
break;
case 95:
console.error("---------VECTOR DECLARACION 2 lsita-------");
break;
case 96:
console.error("---------VECTOR DECLARACION 1--------");
break;
case 97:
console.error("---------VECTOR DECLARACION 2-------");
break;
case 98:
console.error("asignacion");
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,8:4,9:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{6:[1,49],8:50,9:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),o($Vi,[2,30]),{53:$Vj,97:51,98:[1,52]},{69:$Vk,98:[1,55],100:[1,54]},{54:[1,57]},{54:[1,58]},{54:[1,59]},{54:[1,60]},{54:[1,61]},o([69,98,100],$Vl,{54:[1,64],59:[1,65],79:[1,62],80:[1,63]}),{54:[1,66]},{73:[1,67]},{57:[1,68]},{57:[1,69]},{35:71,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,57:[1,70],62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{53:[1,104]},o($VE,[2,129]),o($VE,[2,130]),o($VE,[2,131]),o($VE,[2,132]),o($VE,[2,133]),{7:[1,105]},o($Vh,[2,2]),{57:[1,106],69:$Vk,100:[1,107]},{99:[1,108]},o([57,69,100],$Vl),{35:109,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:110,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{53:[1,111]},{35:112,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:113,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:114,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:115,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:116,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{57:[1,117]},{57:[1,118]},o($VF,[2,67],{71:119,55:120,75:121,70:122,41:$Vn,53:$VG,54:$VH,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg}),{60:[1,126],61:[1,125]},{9:127,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{9:129,10:128,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},o($Vi,[2,71]),o($Vi,[2,70]),o($Vi,[2,68]),{57:[1,130]},o($VI,[2,31],{102:131,40:$VJ,51:[1,134],79:[1,132],80:[1,133],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($VI,[2,32]),o($VI,[2,33]),o($VI,[2,34]),{41:[1,150]},o($VI,[2,36]),o($VI,[2,37]),o($VI,[2,38]),o($VI,[2,39]),o($VI,[2,40]),o($VI,[2,41]),o($VI,[2,42]),o($VI,[2,43]),o($VI,[2,44]),o($VY,[2,103]),{36:152,41:$Vn,53:$VG,54:$VH,70:86,73:$Vx,75:151,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{54:[1,153]},{54:[1,154]},{54:[1,155]},{54:[1,156]},{54:[1,157]},{54:[1,158]},{54:[1,159]},o([40,51,52,56,57,79,80,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115],$VZ,{54:[1,160]}),o($V_,[2,119]),o($V_,[2,120]),o($V_,[2,122]),{36:161,41:$Vn,53:$VG,54:$VH,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{36:162,41:$Vn,53:$VG,54:$VH,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},o($V_,[2,126]),o($V_,[2,127]),o($V_,[2,128]),{54:[1,163]},{1:[2,1]},o($Vi,[2,92]),{35:164,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{53:$Vj,97:165,98:[1,166]},{57:[1,167]},{99:[1,168]},o([57,69,98,100],[2,134]),{56:[1,169]},{56:[1,170]},{56:[1,171]},{56:[1,172]},{56:[1,173]},o($Vi,[2,72]),o($Vi,[2,73]),{56:[1,174],69:[1,175]},{56:[1,176],69:$V$},{53:[1,178]},o($V01,[2,61]),o($V_,$VZ),{36:152,41:$Vn,53:$VG,54:$VH,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{54:[1,179]},{54:[1,180]},{36:181,41:$Vn,53:$VG,54:$VH,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{9:183,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,74:[1,182],75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},o($V11,[2,6]),o($Vi,[2,69]),{41:$Vn,53:$VG,54:$VH,70:184,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},o($VI,[2,100]),o($VI,[2,101]),{36:185,41:$Vn,53:$VG,54:$VH,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},o($V21,[2,104]),o($V21,[2,105]),o($V21,[2,106]),o($V21,[2,107]),o($V21,[2,108]),o($V21,[2,109]),o($V21,[2,110]),o($V21,[2,111]),o($V21,[2,112]),o($V21,[2,113]),o($V21,[2,114]),o($V21,[2,115]),o($V21,[2,116]),o($V21,[2,117]),o($V21,[2,118]),o($VI,[2,35]),{56:[1,186]},{40:$VJ,56:[1,187],100:$VK,102:131,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{35:188,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:189,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:190,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:191,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:192,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:193,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:194,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{41:$Vn,53:$VG,54:$VH,55:195,56:[1,196],70:122,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{40:$VJ,99:[1,197],100:$VK,102:131,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{40:$VJ,74:[1,198],100:$VK,102:131,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{41:$Vn,53:$VG,54:$VH,55:200,56:[1,199],70:122,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{57:[1,201]},{69:$Vk,100:[1,202]},{99:[1,203]},o($Vi,[2,98]),{98:[1,205],100:[1,204]},{73:[1,206]},{57:[1,207]},{57:[1,208]},{73:[1,209]},{73:[1,210]},{52:[1,211],73:[1,212]},{75:213,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{57:[1,214]},{41:$Vn,53:$VG,54:$VH,70:215,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},o($VF,[2,66]),{35:216,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{56:[1,217]},{40:$VJ,57:[1,218],100:$VK,102:131,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{84:[1,220],85:[1,219]},o($V11,[2,5]),o($VY,[2,102]),{40:$VJ,52:[1,221],100:$VK,102:131,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{36:222,41:$Vn,53:$VG,54:$VH,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},o($V_,[2,123]),{56:[1,223]},{56:[1,224]},{56:[1,225]},{56:[1,226]},{56:[1,227]},{56:[1,228]},{56:[1,229]},{56:[1,230],69:$V$},o($VI,[2,47]),o($V_,[2,124]),o($V_,[2,125]),{57:[1,231]},{56:[1,232],69:$V$},o($Vi,[2,93]),{73:[1,234],101:[1,233]},{53:$Vj,97:235},{35:236,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{35:237,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{9:129,10:238,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},o($Vi,[2,74]),o($Vi,[2,75]),o($V31,[2,88],{93:239}),{9:129,10:240,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{72:[1,242],75:241,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{9:129,10:243,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{53:[1,244]},o($Vi,[2,48]),o($V01,[2,60]),{56:[1,245]},{57:[1,246]},{35:247,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{54:[1,248]},{54:[1,249]},{36:250,41:$Vn,53:$VG,54:$VH,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},o($VI,[2,99],{102:131,40:$VJ,100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($VI,[2,59]),o($VI,[2,58]),o($VI,[2,57]),o($VI,[2,56]),o($VI,[2,55]),o($VI,[2,54]),o($VI,[2,53]),o($VI,[2,46]),o($Vi,[2,49]),{57:[1,251]},{75:252,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{41:$Vn,53:$VG,54:$VH,55:253,70:122,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{69:$Vk,100:[1,254]},{57:[1,255]},{99:[1,256]},{9:183,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,74:[1,257],75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{74:[2,86],94:258,95:[1,260],96:[1,259]},{9:183,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,74:[1,261],75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{73:[1,262]},{73:[1,263]},{9:183,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,74:[1,264],75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},o($VF,[2,65]),{57:[1,265]},o($Vi,[2,51]),{56:[1,266]},{36:267,41:$Vn,53:$VG,54:$VH,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{36:268,41:$Vn,53:$VG,54:$VH,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},o($VI,[2,45],{102:131,40:$VJ,100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($Vi,[2,50]),{98:[1,269]},{69:$V$,74:[1,270]},{73:[1,272],101:[1,271]},o($Vi,[2,90]),{100:[1,273]},o($V41,[2,83],{88:274}),{74:[1,275]},{35:276,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{52:[1,277]},o($Vi,[2,89]),{9:129,10:278,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{9:129,10:279,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},o($Vi,[2,63]),o($Vi,[2,52]),{73:[1,280]},{40:$VJ,56:[1,281],100:$VK,102:131,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{40:$VJ,56:[1,282],100:$VK,102:131,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{35:283,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{57:[1,284]},{75:285,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{73:[1,286]},{35:287,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},o($Vi,[2,81],{89:288,90:[1,290],91:[1,289]}),o($Vi,[2,84]),{52:[1,291]},{9:129,10:292,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{9:183,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,74:[1,293],75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{9:183,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,74:[1,294],75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{9:129,10:295,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{57:[1,296]},{57:[1,297]},{99:[1,298]},o($Vi,[2,94]),{98:[1,299]},{41:$Vn,53:$VG,54:$VH,55:300,70:122,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{57:[1,301]},o($Vi,[2,79]),{54:[1,302]},{73:[1,303]},{9:129,10:304,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{9:183,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,74:[2,85],75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},o($Vi,[2,64]),o($Vi,[2,62]),{9:183,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,74:[1,305],75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},o($Vi,[2,77]),o($Vi,[2,76]),{57:[1,306]},{35:307,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{69:$V$,74:[1,308]},o($Vi,[2,91]),{35:309,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{9:129,10:310,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},o($V31,[2,87],{11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,75:30,97:31,9:183,53:$V0,58:$V1,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg}),o($Vi,[2,78]),o($Vi,[2,96]),{99:[1,311]},{69:[1,312]},{56:[1,313]},{9:183,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,74:[1,314],75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{98:[1,315]},{73:[1,316]},{73:[1,317]},o($Vi,[2,80]),{35:318,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,53:$Vo,54:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,70:86,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{41:$Vn,53:$VG,54:$VH,55:319,70:122,73:$Vx,98:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD},{9:129,10:320,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{99:[1,321]},{69:$V$,74:[1,322]},{9:183,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,53:$V0,58:$V1,74:[1,323],75:30,76:$V2,77:$V3,78:$V4,81:$V5,82:$V6,83:$V7,85:$V8,86:$V9,87:$Va,92:$Vb,97:31,121:$Vc,122:$Vd,123:$Ve,124:$Vf,125:$Vg},{57:[1,324]},{74:[1,325]},o($V41,[2,82]),o($Vi,[2,97]),{57:[1,326]},o($Vi,[2,95])],
defaultActions: {105:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //here variables , JS
    var flag=0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:  
break;
case 1:  
break;
case 2:return 4
break;
case 3:return 6
break;
case 4:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 69;   

break;
case 5:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 79;   

break;
case 6:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 80;   

break;
case 7:
                console.log("Reconocio un simbolo int, coma. Con lexema: "+ yy_.yytext);
        return 122;   

break;
case 8:
                console.log("Reconocio un simbolo double, coma. Con lexema: "+ yy_.yytext);
        return 123;   

break;
case 9:
                console.log("Reconocio un simbolo char, coma. Con lexema: "+ yy_.yytext);
        return 121;   

break;
case 10:
                console.log("Reconocio un simbolo string, coma. Con lexema: "+ yy_.yytext);
        return 124;   

break;
case 11:
                console.log("Reconocio un simbolo boolean, coma. Con lexema: "+ yy_.yytext);
        return 125;   

break;
case 12:
            console.log("Reconocio un palabra, con el decimal : "+ yy_.yytext);
            return 116;

break;
case 13:
            console.log("Reconocio un palabra, con el entero : "+ yy_.yytext);
            return 41;

break;
case 14:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 118;   

break;
case 15:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 119;   

break;
case 16:
            console.log("Reconocio un palabra, con el char : "+ yy_.yytext);
            return 120;

break;
case 17:
            console.log("Reconocio un palabra, con el str : "+ yy_.yytext);
            return 117;

break;
case 18:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 103;   

break;
case 19:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 40;   

break;
case 20:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 104;   

break;
case 21:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 105;   

break;
case 22:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 106;   

break;
case 23:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 107;   

break;
case 24:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 108;   

break;
case 25:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 109;   

break;
case 26:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 110;   

break;
case 27:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 111;   

break;
case 28:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 112;   

break;
case 29:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 113;   

break;
case 30:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 'not';   

break;
case 31:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 114;   

break;
case 32:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 115;   

break;
case 33:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 54;   

break;
case 34:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 56;   

break;
case 35:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 73;   

break;
case 36:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 74;   

break;
case 37:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 98;   

break;
case 38:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 99;   

break;
case 39:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 57;   

break;
case 40:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 100;   

break;
case 41:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 87;   

break;
case 42:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 90;   

break;
case 43:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 91;   

break;
case 44:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 92;   

break;
case 45:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 96;   

break;
case 46:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 95;   

break;
case 47:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 52;   

break;
case 48:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 85;   

break;
case 49:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 86;   

break;
case 50:
                console.log("Reconocio un new reservado, coma. Con : "+ yy_.yytext);
        return 101;   

break;
case 51:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 83;   

break;
case 52:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 84;   

break;
case 53:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 78;   

break;
case 54:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 77;   

break;
case 55:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 76;   

break;
case 56:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 72;   

break;
case 57:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 82;   

break;
case 58:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 81;   

break;
case 59:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 68;   

break;
case 60:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 67;   

break;
case 61:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 65;   

break;
case 62:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 64;   

break;
case 63:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 62;   

break;
case 64:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 61;   

break;
case 65:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 60;   

break;
case 66:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 51;   

break;
case 67:
                console.log("RPUNTO : "+ yy_.yytext);
        return 59;   

break;
case 68:
        return 58;   

break;
case 69:
        return 66;   

break;
case 70:
        return 63;   

break;
case 71:
        console.log("Reconocio un simbolo reservado, identificador "+ yy_.yytext);
        return 53;     

break;
case 72: /*estos caracteres se omiten*/  
break;
case 73: /*estos caracteres se omiten*/  
break;
case 74:return 7; 
break;
case 75:console.log("Este es un error lexico "+yy_.yytext)
break;
}
},
rules: [/^(?:(\/\/[^\n]*\n))/i,/^(?:(\/\*[^*\/]*\*\/))/i,/^(?:inicio\b)/i,/^(?:fin\b)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:(')([^\']{1}|\\n|\\t|\\r|\\\\)('))/i,/^(?:(")[^\"]*("))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?::)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:run\b)/i,/^(?:round\b)/i,/^(?:tostring\b)/i,/^(?:[a-zA-Z0-9_]+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}