/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,37],$V1=[1,43],$V2=[1,42],$V3=[1,41],$V4=[1,40],$V5=[1,33],$V6=[1,34],$V7=[1,39],$V8=[1,36],$V9=[1,38],$Va=[1,32],$Vb=[1,35],$Vc=[1,44],$Vd=[1,45],$Ve=[1,46],$Vf=[1,47],$Vg=[1,48],$Vh=[6,49,54,73,74,75,78,79,80,82,83,84,89,118,119,120,121,122],$Vi=[6,41,49,50,54,70,71,73,74,75,78,79,80,82,83,84,89,92,93,95,113,114,115,116,117,118,119,120,121,122],$Vj=[1,53],$Vk=[1,56],$Vl=[2,130],$Vm=[1,76],$Vn=[1,93],$Vo=[1,95],$Vp=[1,85],$Vq=[1,92],$Vr=[1,91],$Vs=[1,90],$Vt=[1,89],$Vu=[1,88],$Vv=[1,87],$Vw=[1,86],$Vx=[1,98],$Vy=[1,97],$Vz=[1,94],$VA=[1,96],$VB=[1,99],$VC=[1,100],$VD=[1,101],$VE=[49,52,70,95],$VF=[52,65],$VG=[1,121],$VH=[52,53,68,96],$VI=[1,132],$VJ=[1,145],$VK=[1,131],$VL=[1,133],$VM=[1,134],$VN=[1,135],$VO=[1,136],$VP=[1,137],$VQ=[1,138],$VR=[1,139],$VS=[1,140],$VT=[1,141],$VU=[1,142],$VV=[1,143],$VW=[1,144],$VX=[40,52,53,68,71,76,77,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112],$VY=[40,52,53,65,68,71,76,77,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112],$VZ=[1,172],$V_=[52,65,71],$V$=[49,54,71,73,74,75,78,79,80,82,83,84,89,92,93,118,119,120,121,122],$V01=[41,49,50,70,95,113,114,115,116,117],$V11=[71,92,93],$V21=[6,41,49,50,54,70,71,73,74,75,78,79,80,82,83,84,87,88,89,92,93,95,113,114,115,116,117,118,119,120,121,122];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S0":3,"inicio":4,"S0P":5,"fin":6,"EOF":7,"S1":8,"ESTRUCTURA":9,"INSTRUCCIONES":10,"DECLARACION":11,"ASIGNACION":12,"D_VECTORES":13,"DL_VECTORES":14,"MODIFICAR_VEC":15,"IF":16,"PRINT":17,"PRINTLN":18,"SWITCH":19,"WHILE":20,"INCREMENTO_MINI":21,"DECREMENTO_MINI":22,"FOR":23,"DO_WHILE":24,"DO_ULTIL":25,"BREAK":26,"CONTINUE":27,"RETURN":28,"FUNCION":29,"METODO":30,"PUSH":31,"POP":32,"RUN":33,"LLAMADA":34,"EXPRESION":35,"OPERACION":36,"CASTEO":37,"INCREMENTOS":38,"DECREMENTOS":39,"menos":40,"numero":41,"LOWER":42,"UPPER":43,"ROUND":44,"LENGTH":45,"TYPEOF":46,"TOSTRING":47,"TOCHARARRAY":48,"identificador":49,"parentesis_A":50,"LISTA_VALORES":51,"parentesis_B":52,"punto_coma":53,"run":54,"punto":55,"pop":56,"push":57,"toCharArray":58,"tostring":59,"typeof":60,"length":61,"round":62,"toUpper":63,"toLower":64,"coma":65,"VALORES":66,"PARAMETROS":67,"dos_puntos":68,"void":69,"llave_A":70,"llave_B":71,"TIPO":72,"return":73,"continue":74,"break":75,"incremento":76,"decremento":77,"print":78,"println":79,"do":80,"until":81,"while":82,"for":83,"if":84,"ELSE_IF":85,"ELSE":86,"else":87,"elif":88,"switch":89,"CASE":90,"DEFAULT":91,"default":92,"case":93,"IDENTIFICADORES":94,"corchete_A":95,"corchete_B":96,"igualacion":97,"new":98,"OPERADORES":99,"mas":100,"por":101,"division":102,"potencia":103,"porcentaje":104,"mayor_igual":105,"menor_igual":106,"mayor_que":107,"menor_que":108,"igual":109,"diferente":110,"or":111,"and":112,"decimal":113,"string":114,"true":115,"false":116,"char":117,"prchar":118,"int":119,"double":120,"prstring":121,"boolean":122,"$accept":0,"$end":1},
terminals_: {2:"error",4:"inicio",6:"fin",7:"EOF",40:"menos",41:"numero",49:"identificador",50:"parentesis_A",52:"parentesis_B",53:"punto_coma",54:"run",55:"punto",56:"pop",57:"push",58:"toCharArray",59:"tostring",60:"typeof",61:"length",62:"round",63:"toUpper",64:"toLower",65:"coma",68:"dos_puntos",69:"void",70:"llave_A",71:"llave_B",73:"return",74:"continue",75:"break",76:"incremento",77:"decremento",78:"print",79:"println",80:"do",81:"until",82:"while",83:"for",84:"if",87:"else",88:"elif",89:"switch",92:"default",93:"case",95:"corchete_A",96:"corchete_B",97:"igualacion",98:"new",100:"mas",101:"por",102:"division",103:"potencia",104:"porcentaje",105:"mayor_igual",106:"menor_igual",107:"mayor_que",108:"menor_que",109:"igual",110:"diferente",111:"or",112:"and",113:"decimal",114:"string",115:"true",116:"false",117:"char",118:"prchar",119:"int",120:"double",121:"prstring",122:"boolean"},
productions_: [0,[3,4],[5,2],[5,1],[8,1],[10,2],[10,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[35,1],[35,1],[35,1],[35,1],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[34,5],[33,5],[33,6],[32,6],[31,7],[48,4],[47,4],[46,4],[45,4],[44,4],[43,4],[42,4],[51,3],[51,1],[30,9],[30,7],[29,9],[67,4],[67,2],[67,0],[28,2],[28,3],[27,2],[26,2],[21,3],[22,3],[17,5],[18,5],[25,9],[24,9],[23,10],[16,9],[86,4],[86,0],[85,8],[85,0],[19,8],[91,3],[91,0],[90,5],[90,0],[20,7],[15,7],[15,10],[11,3],[11,5],[14,9],[14,17],[13,11],[13,16],[12,4],[37,4],[38,2],[39,2],[36,3],[36,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[66,1],[66,1],[66,1],[66,1],[66,3],[66,3],[66,3],[66,1],[66,1],[66,1],[72,1],[72,1],[72,1],[72,1],[72,1],[94,3],[94,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("TERMINE DE ANALIZAR EL PROYECTO C:");
break;
case 43:
console.error("---------LLAMADA");
break;
case 44: case 45:
console.error("---------RUN");
break;
case 57:
console.error("---------METODO VOID");
break;
case 58:
console.error("---------METODO");
break;
case 59:
console.error("---------FUNCION");
break;
case 71:
console.error("---------DO_UNTIL");
break;
case 72:
console.error("---------DO_WHILE");
break;
case 73:
console.error("---------FOR");
break;
case 74:
console.error("---------IF");
break;
case 75:
console.error("---------ELSE");
break;
case 77:
console.error("---------ELIF");
break;
case 79:
console.error("---------SWITCH");
break;
case 80:
console.error("---------DEFAULT");
break;
case 82:
console.error("---------CASE");
break;
case 84:
console.error("---------WHILE");
break;
case 85:
console.error("--------------MODFICAR VEC");
break;
case 86:
console.error("--------------MODFICAR VEC 2");
break;
case 87: case 88:
console.error("Declaracion");
break;
case 89:
console.error("---------VECTOR DECLARACION 1 lista--------");
break;
case 90:
console.error("---------VECTOR DECLARACION 2 lsita-------");
break;
case 91:
console.error("---------VECTOR DECLARACION 1--------");
break;
case 92:
console.error("---------VECTOR DECLARACION 2-------");
break;
case 93:
console.error("asignacion");
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,8:4,9:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{6:[1,49],8:50,9:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),o($Vi,[2,30]),{49:$Vj,94:51,95:[1,52]},{65:$Vk,95:[1,55],97:[1,54]},{50:[1,57]},{50:[1,58]},{50:[1,59]},{50:[1,60]},{50:[1,61]},o([65,95,97],$Vl,{50:[1,64],55:[1,65],76:[1,62],77:[1,63]}),{50:[1,66]},{70:[1,67]},{53:[1,68]},{53:[1,69]},{35:71,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,53:[1,70],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{49:[1,102]},o($VE,[2,124]),o($VE,[2,125]),o($VE,[2,126]),o($VE,[2,127]),o($VE,[2,128]),{7:[1,103]},o($Vh,[2,2]),{53:[1,104],65:$Vk,97:[1,105]},{96:[1,106]},o([53,65,97],$Vl),{35:107,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:108,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{49:[1,109]},{35:110,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:111,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:112,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:113,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:114,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{53:[1,115]},{53:[1,116]},o($VF,[2,62],{67:117,51:118,72:119,66:120,41:$Vn,49:$Vo,50:$VG,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg}),{56:[1,123],57:[1,122]},{9:124,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{9:126,10:125,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},o($Vi,[2,66]),o($Vi,[2,65]),o($Vi,[2,63]),{53:[1,127]},o($VH,[2,31],{99:128,40:$VI,76:[1,129],77:[1,130],97:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o($VH,[2,32]),o($VH,[2,33]),o($VH,[2,34]),{41:[1,146]},o($VH,[2,36]),o($VH,[2,37]),o($VH,[2,38]),o($VH,[2,39]),o($VH,[2,40]),o($VH,[2,41]),o($VH,[2,42]),o($VX,[2,98]),{36:148,41:$Vn,49:$Vo,50:$VG,66:84,70:$Vx,72:147,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{50:[1,149]},{50:[1,150]},{50:[1,151]},{50:[1,152]},{50:[1,153]},{50:[1,154]},{50:[1,155]},o($VY,[2,114]),o($VY,[2,115]),o($VY,[2,116]),o($VY,[2,117]),{36:156,41:$Vn,49:$Vo,50:$VG,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{36:157,41:$Vn,49:$Vo,50:$VG,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($VY,[2,121]),o($VY,[2,122]),o($VY,[2,123]),{50:[1,158]},{1:[2,1]},o($Vi,[2,87]),{35:159,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{49:$Vj,94:160,95:[1,161]},{53:[1,162]},{96:[1,163]},o([53,65,95,97],[2,129]),{52:[1,164]},{52:[1,165]},{52:[1,166]},{52:[1,167]},{52:[1,168]},o($Vi,[2,67]),o($Vi,[2,68]),{52:[1,169],65:[1,170]},{52:[1,171],65:$VZ},{49:[1,173]},o($V_,[2,56]),{36:148,41:$Vn,49:$Vo,50:$VG,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{50:[1,174]},{50:[1,175]},{36:176,41:$Vn,49:$Vo,50:$VG,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{9:178,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,71:[1,177],72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},o($V$,[2,6]),o($Vi,[2,64]),{41:$Vn,49:$Vo,50:$VG,66:179,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($VH,[2,95]),o($VH,[2,96]),o($V01,[2,99]),o($V01,[2,100]),o($V01,[2,101]),o($V01,[2,102]),o($V01,[2,103]),o($V01,[2,104]),o($V01,[2,105]),o($V01,[2,106]),o($V01,[2,107]),o($V01,[2,108]),o($V01,[2,109]),o($V01,[2,110]),o($V01,[2,111]),o($V01,[2,112]),o($V01,[2,113]),o($VH,[2,35]),{52:[1,180]},{40:$VI,52:[1,181],97:$VJ,99:128,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW},{35:182,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:183,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:184,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:185,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:186,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:187,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:188,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{40:$VI,96:[1,189],97:$VJ,99:128,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW},{40:$VI,71:[1,190],97:$VJ,99:128,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW},{41:$Vn,49:$Vo,50:$VG,51:192,52:[1,191],66:120,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{53:[1,193]},{65:$Vk,97:[1,194]},{96:[1,195]},o($Vi,[2,93]),{95:[1,197],97:[1,196]},{70:[1,198]},{53:[1,199]},{53:[1,200]},{70:[1,201]},{70:[1,202]},{68:[1,203],70:[1,204]},{72:205,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{53:[1,206]},{41:$Vn,49:$Vo,50:$VG,66:207,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($VF,[2,61]),{35:208,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{52:[1,209]},{40:$VI,53:[1,210],97:$VJ,99:128,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW},{81:[1,212],82:[1,211]},o($V$,[2,5]),o($VX,[2,97]),{36:213,41:$Vn,49:$Vo,50:$VG,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($VY,[2,118]),{52:[1,214]},{52:[1,215]},{52:[1,216]},{52:[1,217]},{52:[1,218]},{52:[1,219]},{52:[1,220]},o($VY,[2,119]),o($VY,[2,120]),{53:[1,221]},{52:[1,222],65:$VZ},o($Vi,[2,88]),{70:[1,224],98:[1,223]},{49:$Vj,94:225},{35:226,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{35:227,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{9:126,10:228,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},o($Vi,[2,69]),o($Vi,[2,70]),o($V11,[2,83],{90:229}),{9:126,10:230,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{69:[1,232],72:231,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{9:126,10:233,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{49:[1,234]},o($Vi,[2,43]),o($V_,[2,55]),{52:[1,235]},{53:[1,236]},{35:237,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{50:[1,238]},{50:[1,239]},o($VH,[2,94],{99:128,40:$VI,97:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o($VH,[2,54]),o($VH,[2,53]),o($VH,[2,52]),o($VH,[2,51]),o($VH,[2,50]),o($VH,[2,49]),o($VH,[2,48]),o($Vi,[2,44]),{53:[1,240]},{72:241,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{41:$Vn,49:$Vo,50:$VG,51:242,66:120,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{65:$Vk,97:[1,243]},{53:[1,244]},{96:[1,245]},{9:178,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,71:[1,246],72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{71:[2,81],91:247,92:[1,249],93:[1,248]},{9:178,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,71:[1,250],72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{70:[1,251]},{70:[1,252]},{9:178,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,71:[1,253],72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},o($VF,[2,60]),{53:[1,254]},o($Vi,[2,46]),{52:[1,255]},{36:256,41:$Vn,49:$Vo,50:$VG,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{36:257,41:$Vn,49:$Vo,50:$VG,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($Vi,[2,45]),{95:[1,258]},{65:$VZ,71:[1,259]},{70:[1,261],98:[1,260]},o($Vi,[2,85]),{97:[1,262]},o($V21,[2,78],{85:263}),{71:[1,264]},{35:265,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{68:[1,266]},o($Vi,[2,84]),{9:126,10:267,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{9:126,10:268,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},o($Vi,[2,58]),o($Vi,[2,47]),{70:[1,269]},{40:$VI,52:[1,270],97:$VJ,99:128,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW},{40:$VI,52:[1,271],97:$VJ,99:128,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW},{35:272,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{53:[1,273]},{72:274,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{70:[1,275]},{35:276,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},o($Vi,[2,76],{86:277,87:[1,279],88:[1,278]}),o($Vi,[2,79]),{68:[1,280]},{9:126,10:281,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{9:178,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,71:[1,282],72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{9:178,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,71:[1,283],72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{9:126,10:284,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{53:[1,285]},{53:[1,286]},{96:[1,287]},o($Vi,[2,89]),{95:[1,288]},{41:$Vn,49:$Vo,50:$VG,51:289,66:120,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{53:[1,290]},o($Vi,[2,74]),{50:[1,291]},{70:[1,292]},{9:126,10:293,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{9:178,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,71:[2,80],72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},o($Vi,[2,59]),o($Vi,[2,57]),{9:178,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,71:[1,294],72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},o($Vi,[2,72]),o($Vi,[2,71]),{53:[1,295]},{35:296,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{65:$VZ,71:[1,297]},o($Vi,[2,86]),{35:298,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{9:126,10:299,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},o($V11,[2,82],{11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,72:30,94:31,9:178,49:$V0,54:$V1,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg}),o($Vi,[2,73]),o($Vi,[2,91]),{96:[1,300]},{65:[1,301]},{52:[1,302]},{9:178,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,71:[1,303],72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{95:[1,304]},{70:[1,305]},{70:[1,306]},o($Vi,[2,75]),{35:307,36:72,37:73,38:74,39:75,40:$Vm,41:$Vn,42:77,43:78,44:79,45:80,46:81,47:82,48:83,49:$Vo,50:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,66:84,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{41:$Vn,49:$Vo,50:$VG,51:308,66:120,70:$Vx,95:$Vy,113:$Vz,114:$VA,115:$VB,116:$VC,117:$VD},{9:126,10:309,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{96:[1,310]},{65:$VZ,71:[1,311]},{9:178,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:23,29:24,30:25,31:26,32:27,33:28,34:29,49:$V0,54:$V1,71:[1,312],72:30,73:$V2,74:$V3,75:$V4,78:$V5,79:$V6,80:$V7,82:$V8,83:$V9,84:$Va,89:$Vb,94:31,118:$Vc,119:$Vd,120:$Ve,121:$Vf,122:$Vg},{53:[1,313]},{71:[1,314]},o($V21,[2,77]),o($Vi,[2,92]),{53:[1,315]},o($Vi,[2,90])],
defaultActions: {103:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //here variables , JS
    var flag=0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:  
break;
case 1:  
break;
case 2:return 4
break;
case 3:return 6
break;
case 4:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 65;   

break;
case 5:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 76;   

break;
case 6:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 77;   

break;
case 7:
                console.log("Reconocio un simbolo int, coma. Con lexema: "+ yy_.yytext);
        return 119;   

break;
case 8:
                console.log("Reconocio un simbolo double, coma. Con lexema: "+ yy_.yytext);
        return 120;   

break;
case 9:
                console.log("Reconocio un simbolo char, coma. Con lexema: "+ yy_.yytext);
        return 118;   

break;
case 10:
                console.log("Reconocio un simbolo string, coma. Con lexema: "+ yy_.yytext);
        return 121;   

break;
case 11:
                console.log("Reconocio un simbolo boolean, coma. Con lexema: "+ yy_.yytext);
        return 122;   

break;
case 12:
            console.log("Reconocio un palabra, con el decimal : "+ yy_.yytext);
            return 113;

break;
case 13:
            console.log("Reconocio un palabra, con el entero : "+ yy_.yytext);
            return 41;

break;
case 14:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 115;   

break;
case 15:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 116;   

break;
case 16:
            console.log("Reconocio un palabra, con el char : "+ yy_.yytext);
            return 117;

break;
case 17:
            console.log("Reconocio un palabra, con el str : "+ yy_.yytext);
            return 114;

break;
case 18:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 100;   

break;
case 19:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 40;   

break;
case 20:
                console.log("Reconocio un simbolo reservado, coma. Con lexema: "+ yy_.yytext);
        return 101;   

break;
case 21:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 102;   

break;
case 22:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 103;   

break;
case 23:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 104;   

break;
case 24:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 105;   

break;
case 25:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 106;   

break;
case 26:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 107;   

break;
case 27:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 108;   

break;
case 28:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 109;   

break;
case 29:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 110;   

break;
case 30:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 'not';   

break;
case 31:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 111;   

break;
case 32:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 112;   

break;
case 33:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 50;   

break;
case 34:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 52;   

break;
case 35:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 70;   

break;
case 36:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 71;   

break;
case 37:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 95;   

break;
case 38:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 96;   

break;
case 39:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 53;   

break;
case 40:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 97;   

break;
case 41:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 84;   

break;
case 42:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 87;   

break;
case 43:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 88;   

break;
case 44:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 89;   

break;
case 45:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 93;   

break;
case 46:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 92;   

break;
case 47:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 68;   

break;
case 48:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 82;   

break;
case 49:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 83;   

break;
case 50:
                console.log("Reconocio un new reservado, coma. Con : "+ yy_.yytext);
        return 98;   

break;
case 51:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 80;   

break;
case 52:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 81;   

break;
case 53:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 75;   

break;
case 54:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 74;   

break;
case 55:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 73;   

break;
case 56:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 69;   

break;
case 57:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 79;   

break;
case 58:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 78;   

break;
case 59:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 64;   

break;
case 60:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 63;   

break;
case 61:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 61;   

break;
case 62:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 60;   

break;
case 63:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 58;   

break;
case 64:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 57;   

break;
case 65:
                console.log("Reconocio un simbolo reservado, coma. Con : "+ yy_.yytext);
        return 56;   

break;
case 66:
                console.log("RPUNTO : "+ yy_.yytext);
        return 55;   

break;
case 67:
        return 54;   

break;
case 68:
        return 62;   

break;
case 69:
        return 59;   

break;
case 70:
        console.log("Reconocio un simbolo reservado, identificador "+ yy_.yytext);
        return 49;     

break;
case 71: /*estos caracteres se omiten*/  
break;
case 72: /*estos caracteres se omiten*/  
break;
case 73:return 7; 
break;
case 74:console.log("Este es un error lexico "+yy_.yytext)
break;
}
},
rules: [/^(?:(\/\/[^\n]*\n))/i,/^(?:(\/\*[^*\/]*\*\/))/i,/^(?:inicio\b)/i,/^(?:fin\b)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:(')([^\']{1}|\\n|\\t|\\r|\\\\)('))/i,/^(?:(")[^\"]*("))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?::)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:\.)/i,/^(?:run\b)/i,/^(?:round\b)/i,/^(?:tostring\b)/i,/^(?:[a-zA-Z0-9_]+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}