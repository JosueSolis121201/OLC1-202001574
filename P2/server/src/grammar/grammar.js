/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,44],$V1=[1,37],$V2=[1,43],$V3=[1,42],$V4=[1,41],$V5=[1,40],$V6=[1,33],$V7=[1,34],$V8=[1,39],$V9=[1,36],$Va=[1,38],$Vb=[1,32],$Vc=[1,35],$Vd=[1,45],$Ve=[1,46],$Vf=[1,47],$Vg=[1,48],$Vh=[1,49],$Vi=[5,34,35,53,62,78,79,80,83,84,85,87,88,89,94,121,122,123,124,125],$Vj=[5,34,35,42,53,54,58,62,78,79,80,83,84,85,87,88,89,94,97,98,116,117,118,119,120,121,122,123,124,125],$Vk=[1,54],$Vl=[1,57],$Vm=[2,140],$Vn=[1,102],$Vo=[1,77],$Vp=[1,98],$Vq=[1,90],$Vr=[1,101],$Vs=[1,89],$Vt=[1,97],$Vu=[1,96],$Vv=[1,95],$Vw=[1,94],$Vx=[1,93],$Vy=[1,92],$Vz=[1,91],$VA=[1,99],$VB=[1,100],$VC=[1,103],$VD=[1,104],$VE=[1,105],$VF=[34,53,54,60],$VG=[60,73],$VH=[1,125],$VI=[1,126],$VJ=[55,57,60,61],$VK=[1,136],$VL=[1,149],$VM=[1,135],$VN=[1,137],$VO=[1,138],$VP=[1,139],$VQ=[1,140],$VR=[1,141],$VS=[1,142],$VT=[1,143],$VU=[1,144],$VV=[1,145],$VW=[1,146],$VX=[1,147],$VY=[1,148],$VZ=[35,41,55,56,57,60,61,100,103,104,105,106,107,108,109,110,111,112,113,114,115],$V_=[2,126],$V$=[35,41,55,56,57,60,61,73,100,103,104,105,106,107,108,109,110,111,112,113,114,115],$V01=[1,181],$V11=[35,60,73],$V21=[34,35,53,62,78,79,80,83,84,85,87,88,89,94,97,98,121,122,123,124,125],$V31=[34,42,53,54,58,116,117,118,119,120],$V41=[35,97,98],$V51=[5,34,35,42,53,54,58,62,78,79,80,83,84,85,87,88,89,92,93,94,97,98,116,117,118,119,120,121,122,123,124,125];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S0":3,"S0P":4,"EOF":5,"S1":6,"ESTRUCTURA":7,"INSTRUCCIONES":8,"DECLARACION":9,"ASIGNACION":10,"D_VECTORES":11,"DL_VECTORES":12,"MODIFICAR_VEC":13,"IF":14,"PRINT":15,"PRINTLN":16,"SWITCH":17,"WHILE":18,"INCREMENTO_MINI":19,"DECREMENTO_MINI":20,"FOR":21,"DO_WHILE":22,"DO_ULTIL":23,"BREAK":24,"CONTINUE":25,"RETURN":26,"FUNCION":27,"METODO":28,"PUSH":29,"POP":30,"RUN":31,"LLAMADA":32,"Bloque":33,"llave_A":34,"llave_B":35,"EXPRESION":36,"OPERACION":37,"CASTEO":38,"INCREMENTOS":39,"DECREMENTOS":40,"menos":41,"numero":42,"LOWER":43,"UPPER":44,"ROUND":45,"LENGTH":46,"TYPEOF":47,"TOSTRING":48,"TOCHARARRAY":49,"LLAMADA_MINI":50,"TERNARIO":51,"ACCESO_VEC":52,"identificador":53,"corchete_A":54,"corchete_B":55,"interrogacion":56,"dos_puntos":57,"parentesis_A":58,"LISTA_VALORES":59,"parentesis_B":60,"punto_coma":61,"run":62,"punto":63,"pop":64,"push":65,"toCharArray":66,"tostring":67,"typeof":68,"length":69,"round":70,"toUpper":71,"toLower":72,"coma":73,"VALORES":74,"PARAMETROS":75,"void":76,"TIPO":77,"return":78,"continue":79,"break":80,"incremento":81,"decremento":82,"print":83,"println":84,"do":85,"until":86,"while":87,"for":88,"if":89,"ELSE_IF":90,"ELSE":91,"else":92,"elif":93,"switch":94,"CASE":95,"DEFAULT":96,"default":97,"case":98,"IDENTIFICADORES":99,"igualacion":100,"new":101,"OPERADORES":102,"mas":103,"por":104,"division":105,"potencia":106,"porcentaje":107,"mayor_igual":108,"menor_igual":109,"mayor_que":110,"menor_que":111,"igual":112,"diferente":113,"or":114,"and":115,"decimal":116,"string":117,"true":118,"false":119,"char":120,"prchar":121,"int":122,"double":123,"prstring":124,"boolean":125,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",34:"llave_A",35:"llave_B",41:"menos",42:"numero",53:"identificador",54:"corchete_A",55:"corchete_B",56:"interrogacion",57:"dos_puntos",58:"parentesis_A",60:"parentesis_B",61:"punto_coma",62:"run",63:"punto",64:"pop",65:"push",66:"toCharArray",67:"tostring",68:"typeof",69:"length",70:"round",71:"toUpper",72:"toLower",73:"coma",76:"void",78:"return",79:"continue",80:"break",81:"incremento",82:"decremento",83:"print",84:"println",85:"do",86:"until",87:"while",88:"for",89:"if",92:"else",93:"elif",94:"switch",97:"default",98:"case",100:"igualacion",101:"new",103:"mas",104:"por",105:"division",106:"potencia",107:"porcentaje",108:"mayor_igual",109:"menor_igual",110:"mayor_que",111:"menor_que",112:"igual",113:"diferente",114:"or",115:"and",116:"decimal",117:"string",118:"true",119:"false",120:"char",121:"prchar",122:"int",123:"double",124:"prstring",125:"boolean"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[8,2],[8,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[33,3],[36,1],[36,1],[36,1],[36,1],[36,2],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[52,4],[52,7],[51,5],[50,4],[50,3],[32,5],[31,5],[31,6],[30,6],[29,7],[49,4],[48,4],[47,4],[46,4],[45,4],[44,4],[43,4],[59,3],[59,1],[28,9],[28,7],[27,9],[75,4],[75,2],[75,0],[26,2],[26,3],[25,2],[24,2],[19,3],[20,3],[15,5],[16,5],[23,9],[22,9],[21,10],[14,9],[91,4],[91,0],[90,8],[90,0],[17,8],[96,3],[96,0],[95,5],[95,0],[18,7],[13,7],[13,10],[9,3],[9,5],[12,9],[12,17],[11,11],[11,16],[10,4],[38,4],[39,2],[40,2],[37,3],[37,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[74,1],[74,1],[74,1],[74,1],[74,3],[74,3],[74,3],[74,1],[74,1],[74,1],[77,1],[77,1],[77,1],[77,1],[77,1],[99,3],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("TERMINE DE ANALIZAR EL PROYECTO C:");  {return $$[$0-1];}
break;
case 2: case 5:
 this.$= $$[$0-1];  $$[$0-1].agregar($$[$0]);
break;
case 3:
this.$= new S1_list($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 4: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 134: case 135: case 136: case 137: case 138:
this.$=$$[$0];
break;
case 6:
this.$= new Instrucciones_list($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 32:
this.$ = new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 48:
 this.$= new Acceso_1D($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 49:
 this.$= new Acceso_2D($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 50:
 this.$= new Ternario($$[$0-4],$$[$0-3],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 51:
 this.$= new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 52:
 this.$= new LlamadaSinParametros($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 53:
 this.$= new Llamada($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);console.log("++++++++++++++++********************");
break;
case 54:
 this.$= new RunSinParametros($$[$0-3],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 55:
 this.$= new Run($$[$0-4],$$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 56:
 this.$= new Pop($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 57:
 this.$= new Push($$[$0-6],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 58:
 this.$= new ToCharArray($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 59:
 this.$= new ToString($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 60:
 this.$= new Typeof($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 61:
 this.$= new Length($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 62:
 this.$= new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 63:
 this.$= new ToUpper($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 64:
 this.$= new ToLower($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 65: case 139:
 this.$= $$[$0-2];  $$[$0-2].agregar($$[$0]);
break;
case 66:
this.$= new Valores_list($$[$0],_$[$0].first_line,_$[$0].first_column)
break;
case 67:
 this.$= new MetodoVoid($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 68:
 this.$= new Metodo($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 69:
 this.$= new Funcion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 70:
 this.$= $$[$0-3];  $$[$0-3].agregar( new Parametros($$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column) );  
break;
case 71:
 lista_nueva =new Parametros_list(_$[$0-1].first_line,_$[$0-1].first_column);  lista_nueva.agregar(new Parametros($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column)); this.$=lista_nueva; 
break;
case 72:
 this.$= new Parametros_list(_$[$0].first_line,_$[$0].first_column);
break;
case 73:
 this.$= new Return($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 74:
 this.$= new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 75:
 this.$= new Continue($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 76:
 this.$= new Break($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 77: case 78:
 this.$= new Incremento($$[$0-2],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 79:
 this.$= new Print($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 80:
 this.$= new Println($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 81:
this.$ = new DoUntil($$[$0-6],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 82:
this.$ = new DoWhile($$[$0-6],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 83:
this.$ = new For($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 84:
 this.$= new If($$[$0-6],$$[$0-3],$$[$0-1],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 85:
 this.$= new Else($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 87:
 this.$= $$[$0-7];  $$[$0-7].agregar( new Elif($$[$0-4],$$[$0-1]) );  
break;
case 88:
 this.$= new If_lista(_$[$0].first_line,_$[$0].first_column);
break;
case 89:
 this.$= new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 90:
 this.$= new Default($$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 92:
 this.$= $$[$0-4];  $$[$0-4].agregar( new Case($$[$0-2],$$[$0]) );  
break;
case 93:
 this.$= new Case_list(_$[$0].first_line,_$[$0].first_column);
break;
case 94:
 this.$= new While($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 95:
 this.$= new VectorModificar_1D($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 96:
 this.$= new VectorModificar_2D($$[$0-9],$$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 97:
 this.$= new Declaracion($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 98:
 this.$= new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 99:
 this.$= new DeclaracionListaVector_1D($$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 100:
 this.$= new DeclaracionListaVector_2D($$[$0-16],$$[$0-15],$$[$0-14],$$[$0-13],$$[$0-12],$$[$0-11],$$[$0-7],$$[$0-3],_$[$0-16].first_line,_$[$0-16].first_column);
break;
case 101:
 this.$= new VectorDeclarado_1D($$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-4],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 102:
 this.$= new VectorDeclarado_2D($$[$0-15],$$[$0-14],$$[$0-13],$$[$0-12],$$[$0-11],$$[$0-10],$$[$0-7],$$[$0-5],$$[$0-2],_$[$0-15].first_line,_$[$0-15].first_column);
break;
case 103:
 this.$= new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 104:
 this.$= new Casteo($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 105: case 106:
 this.$= new Incremento($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 107:
 this.$= new OperacionBinaria($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 124:
 this.$=new Primitivos(new Valor($$[$0],1),_$[$0].first_line,_$[$0].first_column);
break;
case 125:
 this.$=new Primitivos(new Valor($$[$0],2),_$[$0].first_line,_$[$0].first_column);
break;
case 126:
 this.$=new Primitivos(new Valor($$[$0],6),_$[$0].first_line,_$[$0].first_column);
break;
case 127:
 this.$=new Primitivos(new Valor($$[$0],3),_$[$0].first_line,_$[$0].first_column);
break;
case 128:
this.$= $$[$0-1];
break;
case 129: case 130:
this.$=$$[$0-1];
break;
case 131: case 132:
 this.$=new Primitivos(new Valor($$[$0],4),_$[$0].first_line,_$[$0].first_column);
break;
case 133:
 this.$=new Primitivos(new Valor($$[$0],5),_$[$0].first_line,_$[$0].first_column);
break;
case 140:
 this.$= new Identificadores_lista($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{1:[3]},{5:[1,50],6:51,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),o($Vj,[2,27]),o($Vj,[2,28]),o($Vj,[2,29]),o($Vj,[2,30]),o($Vj,[2,31]),{53:$Vk,54:[1,53],99:52},{54:[1,56],73:$Vl,100:[1,55]},{58:[1,58]},{58:[1,59]},{58:[1,60]},{58:[1,61]},{58:[1,62]},o([54,73,100],$Vm,{58:[1,65],63:[1,66],81:[1,63],82:[1,64]}),{58:[1,67]},{34:[1,68]},{61:[1,69]},{61:[1,70]},{34:$Vn,36:72,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,61:[1,71],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{53:[1,106]},{4:107,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($VF,[2,134]),o($VF,[2,135]),o($VF,[2,136]),o($VF,[2,137]),o($VF,[2,138]),{1:[2,1]},o($Vi,[2,2]),{61:[1,108],73:$Vl,100:[1,109]},{55:[1,110]},o([61,73,100],$Vm),{34:$Vn,36:111,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:112,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{53:[1,113]},{34:$Vn,36:114,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:115,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:116,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:117,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:118,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{61:[1,119]},{61:[1,120]},o($VG,[2,72],{75:121,59:122,77:123,74:124,34:$Vn,42:$Vp,53:$VH,54:$Vr,58:$VI,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh}),{64:[1,128],65:[1,127]},{7:129,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{7:131,8:130,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($Vj,[2,76]),o($Vj,[2,75]),o($Vj,[2,73]),{61:[1,132]},o($VJ,[2,33],{102:133,41:$VK,56:[1,134],100:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,112:$VV,113:$VW,114:$VX,115:$VY}),o($VJ,[2,34]),o($VJ,[2,35]),o($VJ,[2,36]),{42:[1,150]},o($VJ,[2,38]),o($VJ,[2,39]),o($VJ,[2,40]),o($VJ,[2,41]),o($VJ,[2,42]),o($VJ,[2,43]),o($VJ,[2,44]),o($VJ,[2,45]),o($VJ,[2,46]),o($VJ,[2,47]),o($VZ,[2,108]),{34:$Vn,37:152,42:$Vp,53:$VH,54:$Vr,58:$VI,74:88,77:151,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o([41,55,56,57,60,61,100,103,104,105,106,107,108,109,110,111,112,113,114,115],$V_,{54:[1,156],58:[1,155],81:[1,153],82:[1,154]}),{58:[1,157]},{58:[1,158]},{58:[1,159]},{58:[1,160]},{58:[1,161]},{58:[1,162]},{58:[1,163]},o($V$,[2,124]),o($V$,[2,125]),o($V$,[2,127]),{34:$Vn,37:164,42:$Vp,53:$VH,54:$Vr,58:$VI,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,37:165,42:$Vp,53:$VH,54:$Vr,58:$VI,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},o($V$,[2,131]),o($V$,[2,132]),o($V$,[2,133]),{58:[1,166]},{6:51,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[1,167],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($Vj,[2,97]),{34:$Vn,36:168,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{53:$Vk,54:[1,170],99:169},{61:[1,171]},{55:[1,172]},o([54,61,73,100],[2,139]),{60:[1,173]},{60:[1,174]},{60:[1,175]},{60:[1,176]},{60:[1,177]},o($Vj,[2,77]),o($Vj,[2,78]),{60:[1,178],73:[1,179]},{60:[1,180],73:$V01},{53:[1,182]},o($V11,[2,66]),o($V$,$V_),{34:$Vn,37:152,42:$Vp,53:$VH,54:$Vr,58:$VI,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{58:[1,183]},{58:[1,184]},{34:$Vn,37:185,42:$Vp,53:$VH,54:$Vr,58:$VI,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{7:187,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[1,186],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($V21,[2,6]),o($Vj,[2,74]),{34:$Vn,42:$Vp,53:$VH,54:$Vr,58:$VI,74:188,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,37:189,42:$Vp,53:$VH,54:$Vr,58:$VI,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},o($V31,[2,109]),o($V31,[2,110]),o($V31,[2,111]),o($V31,[2,112]),o($V31,[2,113]),o($V31,[2,114]),o($V31,[2,115]),o($V31,[2,116]),o($V31,[2,117]),o($V31,[2,118]),o($V31,[2,119]),o($V31,[2,120]),o($V31,[2,121]),o($V31,[2,122]),o($V31,[2,123]),o($VJ,[2,37]),{60:[1,190]},{41:$VK,60:[1,191],100:$VL,102:133,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,112:$VV,113:$VW,114:$VX,115:$VY},o($VJ,[2,105]),o($VJ,[2,106]),{34:$Vn,42:$Vp,53:$VH,54:$Vr,58:$VI,59:192,60:[1,193],74:124,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{42:[1,194]},{34:$Vn,36:195,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:196,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:197,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:198,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:199,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:200,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:201,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{41:$VK,55:[1,202],100:$VL,102:133,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,112:$VV,113:$VW,114:$VX,115:$VY},{35:[1,203],41:$VK,100:$VL,102:133,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,112:$VV,113:$VW,114:$VX,115:$VY},{34:$Vn,42:$Vp,53:$VH,54:$Vr,58:$VI,59:205,60:[1,204],74:124,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},o($Vj,[2,32]),{61:[1,206]},{73:$Vl,100:[1,207]},{55:[1,208]},o($Vj,[2,103]),{54:[1,210],100:[1,209]},{34:[1,211]},{61:[1,212]},{61:[1,213]},{34:[1,214]},{34:[1,215]},{34:[1,217],57:[1,216]},{77:218,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{61:[1,219]},{34:$Vn,42:$Vp,53:$VH,54:$Vr,58:$VI,74:220,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},o($VG,[2,71]),{34:$Vn,36:221,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{60:[1,222]},{41:$VK,61:[1,223],100:$VL,102:133,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,112:$VV,113:$VW,114:$VX,115:$VY},{86:[1,225],87:[1,224]},o($V21,[2,5]),o($VZ,[2,107]),{41:$VK,57:[1,226],100:$VL,102:133,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,112:$VV,113:$VW,114:$VX,115:$VY},{34:$Vn,37:227,42:$Vp,53:$VH,54:$Vr,58:$VI,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},o($V$,[2,128]),{60:[1,228],73:$V01},o($VJ,[2,52]),{55:[1,229]},{60:[1,230]},{60:[1,231]},{60:[1,232]},{60:[1,233]},{60:[1,234]},{60:[1,235]},{60:[1,236]},o($V$,[2,129]),o($V$,[2,130]),{61:[1,237]},{60:[1,238],73:$V01},o($Vj,[2,98]),{34:[1,240],101:[1,239]},{53:$Vk,99:241},{34:$Vn,36:242,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,36:243,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{7:131,8:244,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($Vj,[2,79]),o($Vj,[2,80]),o($V41,[2,93],{95:245}),{7:131,8:246,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{76:[1,248],77:247,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{7:131,8:249,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{53:[1,250]},o($Vj,[2,53]),o($V11,[2,65]),{60:[1,251]},{61:[1,252]},{34:$Vn,36:253,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{58:[1,254]},{58:[1,255]},{34:$Vn,37:256,42:$Vp,53:$VH,54:$Vr,58:$VI,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},o($VJ,[2,104],{102:133,41:$VK,100:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,112:$VV,113:$VW,114:$VX,115:$VY}),o($VJ,[2,51]),o($VJ,[2,48],{54:[1,257]}),o($VJ,[2,64]),o($VJ,[2,63]),o($VJ,[2,62]),o($VJ,[2,61]),o($VJ,[2,60]),o($VJ,[2,59]),o($VJ,[2,58]),o($Vj,[2,54]),{61:[1,258]},{77:259,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{34:$Vn,42:$Vp,53:$VH,54:$Vr,58:$VI,59:260,74:124,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{73:$Vl,100:[1,261]},{61:[1,262]},{55:[1,263]},{7:187,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[1,264],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{35:[2,91],96:265,97:[1,267],98:[1,266]},{7:187,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[1,268],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{34:[1,269]},{34:[1,270]},{7:187,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[1,271],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($VG,[2,70]),{61:[1,272]},o($Vj,[2,56]),{60:[1,273]},{34:$Vn,37:274,42:$Vp,53:$VH,54:$Vr,58:$VI,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,37:275,42:$Vp,53:$VH,54:$Vr,58:$VI,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},o($VJ,[2,50],{102:133,41:$VK,100:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,112:$VV,113:$VW,114:$VX,115:$VY}),{42:[1,276]},o($Vj,[2,55]),{54:[1,277]},{35:[1,278],73:$V01},{34:[1,280],101:[1,279]},o($Vj,[2,95]),{100:[1,281]},o($V51,[2,88],{90:282}),{35:[1,283]},{34:$Vn,36:284,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{57:[1,285]},o($Vj,[2,94]),{7:131,8:286,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{7:131,8:287,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($Vj,[2,68]),o($Vj,[2,57]),{34:[1,288]},{41:$VK,60:[1,289],100:$VL,102:133,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,112:$VV,113:$VW,114:$VX,115:$VY},{41:$VK,60:[1,290],100:$VL,102:133,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,112:$VV,113:$VW,114:$VX,115:$VY},{55:[1,291]},{34:$Vn,36:292,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{61:[1,293]},{77:294,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{34:[1,295]},{34:$Vn,36:296,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},o($Vj,[2,86],{91:297,92:[1,299],93:[1,298]}),o($Vj,[2,89]),{57:[1,300]},{7:131,8:301,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{7:187,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[1,302],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{7:187,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[1,303],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{7:131,8:304,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{61:[1,305]},{61:[1,306]},o($VJ,[2,49]),{55:[1,307]},o($Vj,[2,99]),{54:[1,308]},{34:$Vn,42:$Vp,53:$VH,54:$Vr,58:$VI,59:309,74:124,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{61:[1,310]},o($Vj,[2,84]),{58:[1,311]},{34:[1,312]},{7:131,8:313,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{7:187,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[2,90],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($Vj,[2,69]),o($Vj,[2,67]),{7:187,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[1,314],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($Vj,[2,82]),o($Vj,[2,81]),{61:[1,315]},{34:$Vn,36:316,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{35:[1,317],73:$V01},o($Vj,[2,96]),{34:$Vn,36:318,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{7:131,8:319,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},o($V41,[2,92],{9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,77:30,99:31,7:187,34:$V0,53:$V1,62:$V2,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh}),o($Vj,[2,83]),o($Vj,[2,101]),{55:[1,320]},{73:[1,321]},{60:[1,322]},{7:187,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[1,323],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{54:[1,324]},{34:[1,325]},{34:[1,326]},o($Vj,[2,85]),{34:$Vn,36:327,37:73,38:74,39:75,40:76,41:$Vo,42:$Vp,43:78,44:79,45:80,46:81,47:82,48:83,49:84,50:85,51:86,52:87,53:$Vq,54:$Vr,58:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,74:88,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{34:$Vn,42:$Vp,53:$VH,54:$Vr,58:$VI,59:328,74:124,116:$VA,117:$VB,118:$VC,119:$VD,120:$VE},{7:131,8:329,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{55:[1,330]},{35:[1,331],73:$V01},{7:187,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:$V0,35:[1,332],53:$V1,62:$V2,77:30,78:$V3,79:$V4,80:$V5,83:$V6,84:$V7,85:$V8,87:$V9,88:$Va,89:$Vb,94:$Vc,99:31,121:$Vd,122:$Ve,123:$Vf,124:$Vg,125:$Vh},{61:[1,333]},{35:[1,334]},o($V51,[2,87]),o($Vj,[2,102]),{61:[1,335]},o($Vj,[2,100])],
defaultActions: {50:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {OperacionBinaria} = require('../instrucciones/operacionBinaria.ts');
    const {Declaracion} = require('../instrucciones/declaracion.ts');
    const {Ternario} = require('../instrucciones/ternario.ts');
    const {Asignacion} = require('../instrucciones/asignacion.ts');
    const {Casteo} = require('../instrucciones/casteo.ts');
    const {Incremento} = require('../instrucciones/incremento.ts');
    const {VectorDeclarado_2D} = require('../instrucciones/vector_declarado_2D.ts');
    const {VectorDeclarado_1D} = require('../instrucciones/vector_declarado_1D.ts');
    const {DeclaracionListaVector_1D} = require('../instrucciones/declaracion_lista_vector_1D.ts');
    const {DeclaracionListaVector_2D} = require('../instrucciones/declaracion_lista_vector_2D.ts');
    const {Acceso_1D} = require('../instrucciones/acceso_vector_1D.ts');
    const {Acceso_2D} = require('../instrucciones/acceso_vector_2D.ts');
    const {VectorModificar_1D} = require('../instrucciones/vector_modificar_1D.ts');
    const {VectorModificar_2D} = require('../instrucciones/vector_modificar_2D.ts');
    const {Print} = require('../instrucciones/print.ts');
    const {Println} = require('../instrucciones/println.ts');
    const {If} = require('../instrucciones/if.ts');
    const {Elif} = require('../instrucciones/elif.ts');
    const {Else} = require('../instrucciones/else.ts');
    const {If_lista} = require('../instrucciones/if_lista.ts');
    const {Valor} = require('../datos/valor.ts');
    const {Primitivos} = require('../instrucciones/primitivos.ts');
    const {Identificadores_lista} = require('../instrucciones/lista_identificadores.ts');
    const {Case} = require('../instrucciones/case.ts');
    const {Default} = require('../instrucciones/default.ts');
    const {Case_list} = require('../instrucciones/lista_case.ts');
    const {Switch} = require('../instrucciones/switch.ts');
    const {While} = require('../instrucciones/while.ts');
    const {For} = require('../instrucciones/for.ts');
    const {DoWhile} = require('../instrucciones/do_while.ts');
    const {DoUntil} = require('../instrucciones/do_until.ts');
    const {Break} = require('../instrucciones/break.ts');
    const {Continue} = require('../instrucciones/continue.ts');
    const {Return} = require('../instrucciones/return.ts');
    const {Metodo} = require('../instrucciones/metodo.ts');
    const {MetodoVoid} = require('../instrucciones/metodo_void.ts'); 
    const {Funcion} = require('../instrucciones/funcion.ts');
    const {Parametros_list} = require('../instrucciones/lista_parametros.ts');
    const {Parametros} = require('../instrucciones/parametros.ts');
    const {Llamada} = require('../instrucciones/llamada.ts');
    const {LlamadaSinParametros} = require('../instrucciones/llamada_sin_parametros.ts');
    const {ToLower} = require('../instrucciones/lower.ts');
    const {ToUpper} = require('../instrucciones/upper.ts');
    const {Round} = require('../instrucciones/round.ts');
    const {Length} = require('../instrucciones/length.ts');
    const {Typeof} = require('../instrucciones/typeof.ts');
    const {ToString} = require('../instrucciones/string.ts');
    const {ToCharArray} = require('../instrucciones/chararray.ts');
    const {Push} = require('../instrucciones/push.ts');
    const {Run} = require('../instrucciones/run.ts');
    const {RunSinParametros} = require('../instrucciones/run_sin_parametros.ts');
    const {Pop} = require('../instrucciones/pop.ts');
    const {Valores_list} = require('../instrucciones/lista_valores.ts');
    const {Instrucciones_list} = require('../instrucciones/lista_instrucciones.ts');
    const {S1_list} = require('../instrucciones/lista_s1.ts');
    const {Bloque} = require('../instrucciones/bloque.ts');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:  
break;
case 1:  
break;
case 2:return 'inicio'
break;
case 3:return 'fin'
break;
case 4:
        return 73;   

break;
case 5:
        return 81;   

break;
case 6:
        return 82;   

break;
case 7:
        return 122;   

break;
case 8:
        return 123;   

break;
case 9:
        return 121;   

break;
case 10:
        return 124;   

break;
case 11:
        return 125;   

break;
case 12:
            return 116;

break;
case 13:
            return 42;

break;
case 14:
        return 118;   

break;
case 15:
        return 119;   

break;
case 16:
            return 120;

break;
case 17:
            return 117;

break;
case 18:
        return 103;   

break;
case 19:
        return 41;   

break;
case 20:
        return 104;   

break;
case 21:
        return 105;   

break;
case 22:
        return 106;   

break;
case 23:
        return 107;   

break;
case 24:
        return 108;   

break;
case 25:
        return 109;   

break;
case 26:
        return 110;   

break;
case 27:
        return 111;   

break;
case 28:
        return 112;   

break;
case 29:
        return 113;   

break;
case 30:
        return 'not';   

break;
case 31:
        return 114;   

break;
case 32:
        return 115;   

break;
case 33:
        return 58;   

break;
case 34:
        return 60;   

break;
case 35:
        return 34;   

break;
case 36:
        return 35;   

break;
case 37:
        return 54;   

break;
case 38:
        return 55;   

break;
case 39:
        return 61;   

break;
case 40:
        return 100;   

break;
case 41:
        return 89;   

break;
case 42:
        return 92;   

break;
case 43:
        return 93;   

break;
case 44:
        return 94;   

break;
case 45:
        return 98;   

break;
case 46:
        return 97;   

break;
case 47:
        return 57;   

break;
case 48:
        return 87;   

break;
case 49:
        return 88;   

break;
case 50:
        return 101;   

break;
case 51:
        return 85;   

break;
case 52:
        return 86;   

break;
case 53:
        return 80;   

break;
case 54:
        return 79;   

break;
case 55:
        return 78;   

break;
case 56:
        return 76;   

break;
case 57:
        return 84;   

break;
case 58:
        return 83;   

break;
case 59:
        return 72;   

break;
case 60:
        return 71;   

break;
case 61:
        return 69;   

break;
case 62:
        return 68;   

break;
case 63:
        return 66;   

break;
case 64:
        return 65;   

break;
case 65:
        return 64;   

break;
case 66:
        return 56;   

break;
case 67:
        return 63;   

break;
case 68:
        return 62;   

break;
case 69:
        return 70;   

break;
case 70:
        return 67;   

break;
case 71:
        console.log("Reconocio un simbolo reservado, identificador "+ yy_.yytext);
        return 53;     

break;
case 72: /*estos caracteres se omiten*/  
break;
case 73: /*estos caracteres se omiten*/  
break;
case 74:return 5; 
break;
case 75:console.log("Este es un error lexico "+yy_.yytext)
break;
}
},
rules: [/^(?:(\/\/[^\n]*\n))/i,/^(?:(\/\*[^*\/]*\*\/))/i,/^(?:inicio\b)/i,/^(?:fin\b)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:(')([^\']{1}|\\n|\\t|\\r|\\\\)('))/i,/^(?:(")[^\"]*("))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?::)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:run\b)/i,/^(?:round\b)/i,/^(?:tostring\b)/i,/^(?:[a-zA-Z0-9_]+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}